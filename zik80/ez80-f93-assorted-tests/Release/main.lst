Zilog eZ80 Macro Assembler Version 4.2 (11121401)29-Aug-14     15:35:37     page:   1


PC     Object              I  Line    Source 
                           A     1    ; Zilog eZ80 ANSI C Compiler Release 3.4
                           A     2    ; -nomodsect -optspeed -noreduceopt -padbranch 
                           A     3    ; -peephole -globalopt -localcse -const=ROM 
                           A     4    	FILE	"..\..\EZ80~P1U\MAIN.C"
                           A     5    	.assume ADL=1
                           A     6    .DEBUG "C"
                           A     7    .PADBRANCH CCODE
                           A     8    	SEGMENT CODE
                           A     9    .BEGREC "NONAME0",4
                           A    10    .DEFINE "dr"
                           A    11    .VALUE 0
                           A    12    .CLASS 8
                           A    13    .TYPE 12
                           A    14    .ENDEF
                           A    15    .DEFINE "ddr"
                           A    16    .VALUE 1
                           A    17    .CLASS 8
                           A    18    .TYPE 12
                           A    19    .ENDEF
                           A    20    .DEFINE "alt1"
                           A    21    .VALUE 2
                           A    22    .CLASS 8
                           A    23    .TYPE 12
                           A    24    .ENDEF
                           A    25    .DEFINE "alt2"
                           A    26    .VALUE 3
                           A    27    .CLASS 8
                           A    28    .TYPE 12
                           A    29    .ENDEF
                           A    30    .ENDREC "NONAME0"
                           A    31    .BEGREC "NONAME1",10
                           A    32    .DEFINE "uartMode"
                           A    33    .VALUE 0
                           A    34    .CLASS 8
                           A    35    .TYPE 2
                           A    36    .ENDEF
                           A    37    .DEFINE "baudRate"
                           A    38    .VALUE 1
                           A    39    .CLASS 8
                           A    40    .TYPE 4
                           A    41    .ENDEF
                           A    42    .DEFINE "dataBits"
                           A    43    .VALUE 4
                           A    44    .CLASS 8
                           A    45    .TYPE 12
                           A    46    .ENDEF
                           A    47    .DEFINE "stopBits"
                           A    48    .VALUE 5
                           A    49    .CLASS 8
                           A    50    .TYPE 12
                           A    51    .ENDEF
                           A    52    .DEFINE "parity"
Zilog eZ80 Macro Assembler Version 4.2 (11121401)29-Aug-14     15:35:37     page:   2


PC     Object              I  Line    Source main.src
                           A    53    .VALUE 6
                           A    54    .CLASS 8
                           A    55    .TYPE 12
                           A    56    .ENDEF
                           A    57    .DEFINE "fifoTriggerLevel"
                           A    58    .VALUE 7
                           A    59    .CLASS 8
                           A    60    .TYPE 12
                           A    61    .ENDEF
                           A    62    .DEFINE "hwFlowControl"
                           A    63    .VALUE 8
                           A    64    .CLASS 8
                           A    65    .TYPE 12
                           A    66    .ENDEF
                           A    67    .DEFINE "swFlowControl"
                           A    68    .VALUE 9
                           A    69    .CLASS 8
                           A    70    .TYPE 12
                           A    71    .ENDEF
                           A    72    .ENDREC "NONAME1"
                           A    73    .BEGREC "NONAME2",9
                           A    74    .DEFINE "pBuffer"
                           A    75    .VALUE 0
                           A    76    .CLASS 8
                           A    77    .TYPE 44
                           A    78    .ENDEF
                           A    79    .DEFINE "next_in"
                           A    80    .VALUE 3
                           A    81    .CLASS 8
                           A    82    .TYPE 13
                           A    83    .ENDEF
                           A    84    .DEFINE "next_out"
                           A    85    .VALUE 5
                           A    86    .CLASS 8
                           A    87    .TYPE 13
                           A    88    .ENDEF
                           A    89    .DEFINE "size"
                           A    90    .VALUE 7
                           A    91    .CLASS 8
                           A    92    .TYPE 13
                           A    93    .ENDEF
                           A    94    .ENDREC "NONAME2"
                           A    95    .BEGREC "NONAME3",6
                           A    96    .DEFINE "quot"
                           A    97    .VALUE 0
                           A    98    .CLASS 8
                           A    99    .TYPE 4
                           A   100    .ENDEF
                           A   101    .DEFINE "rem"
                           A   102    .VALUE 3
                           A   103    .CLASS 8
                           A   104    .TYPE 4
Zilog eZ80 Macro Assembler Version 4.2 (11121401)29-Aug-14     15:35:37     page:   3


PC     Object              I  Line    Source main.src
                           A   105    .ENDEF
                           A   106    .ENDREC "NONAME3"
                           A   107    .BEGREC "NONAME4",8
                           A   108    .DEFINE "quot"
                           A   109    .VALUE 0
                           A   110    .CLASS 8
                           A   111    .TYPE 5
                           A   112    .ENDEF
                           A   113    .DEFINE "rem"
                           A   114    .VALUE 4
                           A   115    .CLASS 8
                           A   116    .TYPE 5
                           A   117    .ENDEF
                           A   118    .ENDREC "NONAME4"
                           A   119    .BEGREC "header",6
                           A   120    .DEFINE "s"
                           A   121    .VALUE 0
                           A   122    .CLASS 11
                           A   123    .TAG "NONAME5"
                           A   124    .TYPE 8
                           A   125    .ENDEF
                           A   126    .DEFINE "x"
                           A   127    .VALUE 0
                           A   128    .CLASS 11
                           A   129    .TYPE 2
                           A   130    .ENDEF
                           A   131    .ENDREC "header"
                           A   132    .BEGREC "NONAME5",6
                           A   133    .DEFINE "ptr"
                           A   134    .VALUE 0
                           A   135    .CLASS 8
                           A   136    .TAG "header"
                           A   137    .TYPE 40
                           A   138    .ENDEF
                           A   139    .DEFINE "size"
                           A   140    .VALUE 3
                           A   141    .CLASS 8
                           A   142    .TYPE 14
                           A   143    .ENDEF
                           A   144    .ENDREC "NONAME5"
000000                     A   145    _delay_loop:
                           A   146    .DEFINE "_delay_loop"
                           A   147    
                           A   148    .VALUE _delay_loop
                           A   149    
                           A   150    .CLASS 3
                           A   151    
                           A   152    .TYPE 65
                           A   153    
                           A   154    .ENDEF
                           A   155    
                           A   156    .BEGFUNC "delay_loop",12,"_delay_loop"
Zilog eZ80 Macro Assembler Version 4.2 (11121401)29-Aug-14     15:35:37     page:   4


PC     Object              I  Line    Source main.src
                           A   157    
                           A   158    .LINE 12
                           A   159    
                           A   160    .DEFINE "c"
                           A   161    
                           A   162    .CLASS 65
                           A   163    
                           A   164    .VALUE 6
                           A   165    
                           A   166    .TYPE 14
                           A   167    
                           A   168    .ENDEF
                           A   169    
000000 DDE5                A   170    	PUSH	IX
000002 DD210000 00         A   171    	LD	IX,0
000007 DD39                A   172    	ADD	IX,SP
                           A   173    .LINE 13
                           A   174    
000009 18 0A 00            A   175    	JR	L_1
00000C                     A   176    L_2:
                           A   177    .LINE 14
                           A   178    
00000C DD3106              A   179    	LD	IY,(IX+6)
00000F ED33FF              A   180    	LEA	IY,IY+-1
000012 DD3E06              A   181    	LD	(IX+6),IY
000015                     A   182    L_1:
                           A   183    .LINE 15
                           A   184    
000015 01000000            A   185    	LD	BC,0
000019 DD2706              A   186    	LD	HL,(IX+6)
00001C B7                  A   187    	OR	A,A
00001D ED42                A   188    	SBC	HL,BC
00001F 20 EB 00            A   189    	JR	NZ,L_2
                           A   190    .LINE 16
                           A   191    
000022 DDF9                A   192    	LD	SP,IX
000024 DDE1                A   193    	POP	IX
000026 C9                  A   194    	RET	
                           A   195    
                           A   196    
                           A   197    ;**************************** _delay_loop *****
                           A   198    ;Name                         Addr/Register   S
                           A   199    ;c                                     IX+6    
                           A   200    
                           A   201    
                           A   202    ; Stack Frame Size: 9 (bytes)
                           A   203    ;       Spill Code: 0 (instruction)
                           A   204    
                           A   205    
                           A   206    .ENDFUNC "delay_loop",16,"_delay_loop"
                           A   207    ;    1	// Chip Selects:
                           A   208    ;    2	// CS0 e8 0 0c0000 0dffff -> ram
Zilog eZ80 Macro Assembler Version 4.2 (11121401)29-Aug-14     15:35:37     page:   5


PC     Object              I  Line    Source main.src
                           A   209    ;    3	// CS1 e8 0 1c0000 1dffff -> rom
                           A   210    ;    4	// CS2 e8 0 2c0000 2cffff -> audio
                           A   211    ;    5	//
                           A   212    ;    6	// 2.457MHz oscilator in place
                           A   213    ;    7	
                           A   214    ;    8	#include <eZ80.h>
                           A   215    ;    9	#include <uart.h>
                           A   216    ;   10	#include <gpio.h>
                           A   217    ;   11	#include <stdlib.h>
                           A   218    ;   12	
                           A   219    ;   13	#include "skeelib.h"
                           A   220    ;   14	#include "framebuffer.h"
                           A   221    ;   15	#include <lib_ay-3-8912.h>
                           A   222    ;   16	
                           A   223    ;   17	int main ( ) {
000027                     A   224    _main:
                           A   225    .DEFINE "_main"
                           A   226    
                           A   227    .VALUE _main
                           A   228    
                           A   229    .CLASS 2
                           A   230    
                           A   231    .TYPE 68
                           A   232    
                           A   233    .ENDEF
                           A   234    
                           A   235    .BEGFUNC "main",17,"_main"
                           A   236    
                           A   237    .LINE 17
                           A   238    
                           A   239    .DEFINE "i"
                           A   240    
                           A   241    .CLASS 65
                           A   242    
                           A   243    .VALUE -1
                           A   244    
                           A   245    .TYPE 12
                           A   246    
                           A   247    .ENDEF
                           A   248    
                           A   249    .DEFINE "i"
                           A   250    
                           A   251    .CLASS 65
                           A   252    
                           A   253    .VALUE -2
                           A   254    
                           A   255    .TYPE 12
                           A   256    
                           A   257    .ENDEF
                           A   258    
                           A   259    .DEFINE "y"
                           A   260    
Zilog eZ80 Macro Assembler Version 4.2 (11121401)29-Aug-14     15:35:37     page:   6


PC     Object              I  Line    Source main.src
                           A   261    .CLASS 65
                           A   262    
                           A   263    .VALUE -3
                           A   264    
                           A   265    .TYPE 12
                           A   266    
                           A   267    .ENDEF
                           A   268    
                           A   269    .DEFINE "lx"
                           A   270    
                           A   271    .CLASS 65
                           A   272    
                           A   273    .VALUE -4
                           A   274    
                           A   275    .TYPE 12
                           A   276    
                           A   277    .ENDEF
                           A   278    
                           A   279    .DEFINE "x"
                           A   280    
                           A   281    .CLASS 65
                           A   282    
                           A   283    .VALUE -5
                           A   284    
                           A   285    .TYPE 12
                           A   286    
                           A   287    .ENDEF
                           A   288    
                           A   289    .DEFINE "ly"
                           A   290    
                           A   291    .CLASS 65
                           A   292    
                           A   293    .VALUE -6
                           A   294    
                           A   295    .TYPE 12
                           A   296    
                           A   297    .ENDEF
                           A   298    
                           A   299    .DEFINE "c"
                           A   300    
                           A   301    .CLASS 65
                           A   302    
                           A   303    .VALUE -7
                           A   304    
                           A   305    .TYPE 12
                           A   306    
                           A   307    .ENDEF
                           A   308    
                           A   309    .DEFINE "v"
                           A   310    
                           A   311    .CLASS 65
                           A   312    
Zilog eZ80 Macro Assembler Version 4.2 (11121401)29-Aug-14     15:35:37     page:   7


PC     Object              I  Line    Source main.src
                           A   313    .VALUE -8
                           A   314    
                           A   315    .TYPE 12
                           A   316    
                           A   317    .ENDEF
                           A   318    
                           A   319    .DEFINE "u0"
                           A   320    
                           A   321    .CLASS 65
                           A   322    
                           A   323    .VALUE -18
                           A   324    
                           A   325    .TAG "NONAME1"
                           A   326    
                           A   327    .TYPE 8
                           A   328    
                           A   329    .ENDEF
                           A   330    
                           A   331    .DEFINE "b"
                           A   332    
                           A   333    .CLASS 65
                           A   334    
                           A   335    .VALUE -34
                           A   336    
                           A   337    .DIM 16
                           A   338    
                           A   339    .TYPE 98
                           A   340    
                           A   341    .ENDEF
                           A   342    
                           A   343    .DEFINE "b"
                           A   344    
                           A   345    .CLASS 65
                           A   346    
                           A   347    .VALUE -54
                           A   348    
                           A   349    .DIM 20
                           A   350    
                           A   351    .TYPE 98
                           A   352    
                           A   353    .ENDEF
                           A   354    
000027 DDE5                A   355    	PUSH	IX
000029 DD210000 00         A   356    	LD	IX,0
00002E DD39                A   357    	ADD	IX,SP
000030 ED22C7              A   358    	LEA	HL,IX+-57
000033 F9                  A   359    	LD	SP,HL
                           A   360    ;   18	
                           A   361    ;   19	#if 1 // sleep for a few seconds up fro
                           A   362    ;   20		{
                           A   363    ;   21			delay_ms_spin(1000);
                           A   364    .LINE 21
Zilog eZ80 Macro Assembler Version 4.2 (11121401)29-Aug-14     15:35:37     page:   8


PC     Object              I  Line    Source main.src
                           A   365    
000034 01E80300            A   366    	LD	BC,1000
000038 C5                  A   367    	PUSH	BC
000039 DD2FC7              A   368    	LD	(IX+-57),HL
00003C CD 00 00 00         A   369    	CALL	_delay_ms_spin
000040 DD27C7              A   370    	LD	HL,(IX+-57)
000043 C1                  A   371    	POP	BC
                           A   372    ;   22			delay_ms_spin(1000);
                           A   373    .LINE 22
                           A   374    
000044 01E80300            A   375    	LD	BC,1000
000048 C5                  A   376    	PUSH	BC
000049 CD 00 00 00         A   377    	CALL	_delay_ms_spin
00004D C1                  A   378    	POP	BC
                           A   379    ;   23		}
                           A   380    ;   24	#endif
                           A   381    ;   25		
                           A   382    ;   26	#if 1 // uart logger - WORKS
                           A   383    ;   27		{
                           A   384    ;   28			// F93 default is 20MHz - happe
                           A   385    ;   29			// uart0 is on port d
                           A   386    ;   30			// uart1 is on port c
                           A   387    ;   31			
                           A   388    ;   32			//UCHAR open_UARTx(UART * pUART
                           A   389    ;   33			
                           A   390    ;   34			UART u0;
                           A   391    ;   35			char b [ 16 ];
                           A   392    ;   36			unsigned char i;
                           A   393    ;   37			
                           A   394    ;   38			u0.uartMode = INTERRUPT; //POLL
                           A   395    .LINE 38
                           A   396    
00004E DD36EE01            A   397    	LD	(IX+-18),1
                           A   398    ;   39			u0.baudRate =  BAUD_57600; //BA
                           A   399    .LINE 39
                           A   400    
000052 0100E100            A   401    	LD	BC,57600
000056 DD0FEF              A   402    	LD	(IX+-17),BC
                           A   403    ;   40			u0.dataBits = DATABITS_8;
                           A   404    .LINE 40
                           A   405    
000059 DD36F208            A   406    	LD	(IX+-14),8
                           A   407    ;   41			u0.stopBits = STOPBITS_1;
                           A   408    .LINE 41
                           A   409    
00005D DD36F301            A   410    	LD	(IX+-13),1
                           A   411    ;   42			u0.parity = PAR_NOPARITY;
                           A   412    .LINE 42
                           A   413    
000061 DD36F400            A   414    	LD	(IX+-12),0
                           A   415    ;   43			u0.fifoTriggerLevel = FIFO_TRGL
                           A   416    .LINE 43
Zilog eZ80 Macro Assembler Version 4.2 (11121401)29-Aug-14     15:35:37     page:   9


PC     Object              I  Line    Source main.src
                           A   417    
000065 DD36F501            A   418    	LD	(IX+-11),1
                           A   419    ;   44			u0.hwFlowControl = DISABLE_HWFL
                           A   420    .LINE 44
                           A   421    
000069 DD36F600            A   422    	LD	(IX+-10),0
                           A   423    ;   45			u0.swFlowControl = DISABLE_SWFL
                           A   424    .LINE 45
                           A   425    
00006D DD36F700            A   426    	LD	(IX+-9),0
                           A   427    ;   46			
                           A   428    ;   47			open_UART0 ( &u0 );
                           A   429    .LINE 47
                           A   430    
000071 ED65EE              A   431    	PEA	IX+-18
000074 CD 00 00 00         A   432    	CALL	_open_UART0
000078 C1                  A   433    	POP	BC
                           A   434    ;   48			
                           A   435    ;   49			b [ 0 ] = 'A';
                           A   436    .LINE 49
                           A   437    
000079 DD36DE41            A   438    	LD	(IX+-34),65
                           A   439    ;   50			b [ 1 ] = 'B';
                           A   440    .LINE 50
                           A   441    
00007D ED22DE              A   442    	LEA	HL,IX+-34
000080 23                  A   443    	INC	HL
000081 3642                A   444    	LD	(HL),66
                           A   445    ;   51			b [ 2 ] = 'C';
                           A   446    .LINE 51
                           A   447    
000083 ED55DE              A   448    	LEA	IY,IX+-34
000086 ED2302              A   449    	LEA	HL,IY+2
000089 3643                A   450    	LD	(HL),67
                           A   451    ;   52			b [ 3 ] = '\0';
                           A   452    .LINE 52
                           A   453    
00008B ED2303              A   454    	LEA	HL,IY+3
00008E 3600                A   455    	LD	(HL),0
                           A   456    ;   53			
                           A   457    ;   54			for ( i = 0; i < 5; i++ ) {
                           A   458    .LINE 54
                           A   459    
000090 DD36FF00            A   460    	LD	(IX+-1),0
000094 18 12 00            A   461    	JR	L_7
000097                     A   462    L_5:
                           A   463    ;   55				write_UART0 ( b, 3 );
                           A   464    .LINE 55
                           A   465    
000097 01030000            A   466    	LD	BC,3
00009B C5                  A   467    	PUSH	BC
00009C ED65DE              A   468    	PEA	IX+-34
Zilog eZ80 Macro Assembler Version 4.2 (11121401)29-Aug-14     15:35:37     page:  10


PC     Object              I  Line    Source main.src
00009F CD 00 00 00         A   469    	CALL	_write_UART0
0000A3 C1                  A   470    	POP	BC
0000A4 C1                  A   471    	POP	BC
0000A5 DD34FF              A   472    	INC	(IX+-1)
                           A   473    ;   56			}
0000A8                     A   474    L_7:
                           A   475    .LINE 56
                           A   476    
0000A8 DD7EFF              A   477    	LD	A,(IX+-1)
0000AB FE05                A   478    	CP	A,5
0000AD 38 E8 00            A   479    	JR	C,L_5
                           A   480    ;   57			
                           A   481    ;   58			lame_itoa ( (int) b, b );
                           A   482    .LINE 58
                           A   483    
0000B0 ED65DE              A   484    	PEA	IX+-34
0000B3 ED65DE              A   485    	PEA	IX+-34
0000B6 CD 00 00 00         A   486    	CALL	_lame_itoa
0000BA C1                  A   487    	POP	BC
0000BB C1                  A   488    	POP	BC
                           A   489    ;   59			
                           A   490    ;   60			write_UART0 ( b, lame_strlen ( 
                           A   491    .LINE 60
                           A   492    
0000BC ED65DE              A   493    	PEA	IX+-34
0000BF CD 00 00 00         A   494    	CALL	_lame_strlen
0000C3 C1                  A   495    	POP	BC
0000C4 E5C1                A   496    	LD	BC,HL
0000C6 CD 00 00 00         A   497    	CALL	__stoiu
0000CA E5                  A   498    	PUSH	HL
0000CB ED65DE              A   499    	PEA	IX+-34
0000CE CD 00 00 00         A   500    	CALL	_write_UART0
0000D2 C1                  A   501    	POP	BC
0000D3 C1                  A   502    	POP	BC
                           A   503    ;   61			write_UART0 ( "\n", 1 );
                           A   504    .LINE 61
                           A   505    
0000D4 01010000            A   506    	LD	BC,1
0000D8 C5                  A   507    	PUSH	BC
0000D9 01 00 00 00         A   508    	LD	BC,L__3
0000DD C5                  A   509    	PUSH	BC
0000DE CD 00 00 00         A   510    	CALL	_write_UART0
0000E2 C1                  A   511    	POP	BC
0000E3 C1                  A   512    	POP	BC
                           A   513    ;   62			
                           A   514    ;   63		}
                           A   515    ;   64	#endif
                           A   516    ;   65		
                           A   517    ;   66	#if 0 // ext ram write
                           A   518    ;   67		{
                           A   519    ;   68			unsigned char *extram;
                           A   520    ;   69	
Zilog eZ80 Macro Assembler Version 4.2 (11121401)29-Aug-14     15:35:37     page:  11


PC     Object              I  Line    Source main.src
                           A   521    ;   70			extram = (unsigned char *) 0x0C
                           A   522    ;   71			*extram = 0;
                           A   523    ;   72			extram++;
                           A   524    ;   73			*extram = 1;
                           A   525    ;   74			extram++;
                           A   526    ;   75			*extram = 2;
                           A   527    ;   76			extram++;
                           A   528    ;   77			*extram = 3;
                           A   529    ;   78			extram++;
                           A   530    ;   79			*extram = 4;
                           A   531    ;   80			extram++;
                           A   532    ;   81			*extram = 5;
                           A   533    ;   82			extram++;
                           A   534    ;   83			*extram = 6;
                           A   535    ;   84			extram++;
                           A   536    ;   85	
                           A   537    ;   86		}
                           A   538    ;   87	#endif
                           A   539    ;   88		
                           A   540    ;   89	#if 0 // ext audio AY-3-8912 test
                           A   541    ;   90		{
                           A   542    ;   91			
                           A   543    ;   92			PORT pc;
                           A   544    ;   93			UCHAR err;
                           A   545    ;   94			
                           A   546    ;   95			pc.dr = 0x01;
                           A   547    ;   96			pc.ddr = 0; // 0 ddr is output
                           A   548    ;   97			//pc.alt0 = 0; // does not exis
                           A   549    ;   98			pc.alt1 = 0;
                           A   550    ;   99			pc.alt2 = 0;
                           A   551    ;  100			
                           A   552    ;  101			open_PortC ( &pc );
                           A   553    ;  102	
                           A   554    ;  103			while ( 1 ) {
                           A   555    ;  104				delay_ms_spin ( 1000 );
                           A   556    ;  105				ym_play_demo();
                           A   557    ;  106			} // while
                           A   558    ;  107			
                           A   559    ;  108		}
                           A   560    ;  109	#endif
                           A   561    ;  110	
                           A   562    ;  111	//#__pragma noopt
                           A   563    ;  112	#if 0 // ext rom read
                           A   564    ;  113		//while (1)
                           A   565    ;  114		{
                           A   566    ;  115			unsigned char *extram;
                           A   567    ;  116			unsigned char b [ 251 ];
                           A   568    ;  117			unsigned char i;
                           A   569    ;  118			unsigned char v;
                           A   570    ;  119			
                           A   571    ;  120			extram = (unsigned char *) 0x1C
                           A   572    ;  121			
Zilog eZ80 Macro Assembler Version 4.2 (11121401)29-Aug-14     15:35:37     page:  12


PC     Object              I  Line    Source main.src
                           A   573    ;  122			for ( i = 0; i < 250; i++ ) {
                           A   574    ;  123				v = *extram;
                           A   575    ;  124				b [ i ] = v;
                           A   576    ;  125				extram++;
                           A   577    ;  126			}
                           A   578    ;  127			
                           A   579    ;  128			write_UART0 ( (char*)b, i - 1 )
                           A   580    ;  129			
                           A   581    ;  130			extram = (unsigned char *) 0x1C
                           A   582    ;  131	
                           A   583    ;  132		}
                           A   584    ;  133	#endif
                           A   585    ;  134	
                           A   586    ;  135	#if 0 // ext rom write-delay-loop - ful
                           A   587    ;  136		{
                           A   588    ;  137			UINT8 shift = 0;
                           A   589    ;  138			while (1)
                           A   590    ;  139			{
                           A   591    ;  140				unsigned char *extram;
                           A   592    ;  141				UINT32 x, y;
                           A   593    ;  142				
                           A   594    ;  143				extram = (unsigned char *) 
                           A   595    ;  144				
                           A   596    ;  145				for ( y = 0; y < 192; y++ )
                           A   597    ;  146					for ( x = 0; x < 256; x
                           A   598    ;  147						*extram = y + (shif
                           A   599    ;  148						extram++;
                           A   600    ;  149					}
                           A   601    ;  150				}
                           A   602    ;  151				
                           A   603    ;  152				//delay_ms_spin ( 10 );
                           A   604    ;  153				
                           A   605    ;  154				//extram = (unsigned char *
                           A   606    ;  155				
                           A   607    ;  156				shift++;
                           A   608    ;  157	
                           A   609    ;  158			}
                           A   610    ;  159		}
                           A   611    ;  160	#endif
                           A   612    ;  161	
                           A   613    ;  162	#if 0 // ext ram write-delay-loop - min
                           A   614    ;  163		{
                           A   615    ;  164			UINT16 y = 0;
                           A   616    ;  165			UINT16 c = 0;
                           A   617    ;  166			UINT16 cx = 2, cy = 150;
                           A   618    ;  167			while (1)
                           A   619    ;  168			{
                           A   620    ;  169				unsigned char *extram;
                           A   621    ;  170				UINT16 x;
                           A   622    ;  171				
                           A   623    ;  172				extram = (unsigned char *) 
                           A   624    ;  173				extram += ( y * 256 );
Zilog eZ80 Macro Assembler Version 4.2 (11121401)29-Aug-14     15:35:37     page:  13


PC     Object              I  Line    Source main.src
                           A   625    ;  174				
                           A   626    ;  175				if ( y > 190 ) continue;
                           A   627    ;  176				
                           A   628    ;  177				for ( x = 0; x < 256; x++ )
                           A   629    ;  178					*extram = c & 0xFF;
                           A   630    ;  179					extram++;
                           A   631    ;  180				}
                           A   632    ;  181				
                           A   633    ;  182				delay_ms_spin ( 10 );
                           A   634    ;  183				
                           A   635    ;  184				y++;
                           A   636    ;  185				c++;
                           A   637    ;  186				
                           A   638    ;  187			}
                           A   639    ;  188		}
                           A   640    ;  189	#endif
                           A   641    ;  190	
                           A   642    ;  191		
                           A   643    ;  192	#if 1 // RAM random line demo
                           A   644    ;  193		while ( 1 ) {
                           A   645    ;  194			UINT8 x, y, lx = 0, ly; // x, y
                           A   646    ;  195			UINT8 c;
                           A   647    ;  196			UINT16 maxlines = 1250;
                           A   648    ;  197			UINT8 i;
                           A   649    ;  198			UINT8 *extram;
                           A   650    ;  199				
                           A   651    ;  200			extram = (UINT8 *) 0x0C0000;
                           A   652    ;  201	
                           A   653    ;  202			fb_render_rect_filled ( extram,
                           A   654    .LINE 202
                           A   655    
0000E4 01010000            A   656    	LD	BC,1
0000E8 C5                  A   657    	PUSH	BC
0000E9 01BE0000            A   658    	LD	BC,190
0000ED C5                  A   659    	PUSH	BC
0000EE 01FA0000            A   660    	LD	BC,250
0000F2 C5                  A   661    	PUSH	BC
0000F3 01000000            A   662    	LD	BC,0
0000F7 C5                  A   663    	PUSH	BC
0000F8 C5                  A   664    	PUSH	BC
0000F9 0100000C            A   665    	LD	BC,786432
0000FD C5                  A   666    	PUSH	BC
0000FE CD 00 00 00         A   667    	CALL	_fb_render_rect_filled
000102 C1                  A   668    	POP	BC
000103 C1                  A   669    	POP	BC
000104 C1                  A   670    	POP	BC
000105 C1                  A   671    	POP	BC
000106 C1                  A   672    	POP	BC
000107 C1                  A   673    	POP	BC
                           A   674    ;  203			
                           A   675    ;  204			x = y = lx = ly = 0;
                           A   676    .LINE 204
Zilog eZ80 Macro Assembler Version 4.2 (11121401)29-Aug-14     15:35:37     page:  14


PC     Object              I  Line    Source main.src
                           A   677    
000108 DD36FA00            A   678    	LD	(IX+-6),0
00010C DD36FC00            A   679    	LD	(IX+-4),0
000110 DD36FD00            A   680    	LD	(IX+-3),0
000114 DD36FB00            A   681    	LD	(IX+-5),0
                           A   682    ;  205	
                           A   683    ;  206			for ( i = 0; i < maxlines; i++ 
                           A   684    .LINE 206
                           A   685    
000118 DD36FE00            A   686    	LD	(IX+-2),0
00011C 18 75 00            A   687    	JR	L_14
00011F                     A   688    L_12:
                           A   689    ;  207				
                           A   690    ;  208				x = lame_randrange8 ( 10, 2
                           A   691    .LINE 208
                           A   692    
00011F 01E60000            A   693    	LD	BC,230
000123 C5                  A   694    	PUSH	BC
000124 010A0000            A   695    	LD	BC,10
000128 C5                  A   696    	PUSH	BC
000129 CD 00 00 00         A   697    	CALL	_lame_randrange8
00012D C1                  A   698    	POP	BC
00012E C1                  A   699    	POP	BC
00012F DD77FB              A   700    	LD	(IX+-5),A
                           A   701    ;  209				y = lame_randrange8 ( 10, 1
                           A   702    .LINE 209
                           A   703    
000132 01AA0000            A   704    	LD	BC,170
000136 C5                  A   705    	PUSH	BC
000137 010A0000            A   706    	LD	BC,10
00013B C5                  A   707    	PUSH	BC
00013C CD 00 00 00         A   708    	CALL	_lame_randrange8
000140 C1                  A   709    	POP	BC
000141 C1                  A   710    	POP	BC
000142 DD77FD              A   711    	LD	(IX+-3),A
                           A   712    ;  210				c = lame_randrange8 ( 0, 0x
                           A   713    .LINE 210
                           A   714    
000145 013F0000            A   715    	LD	BC,63
000149 C5                  A   716    	PUSH	BC
00014A 01000000            A   717    	LD	BC,0
00014E C5                  A   718    	PUSH	BC
00014F CD 00 00 00         A   719    	CALL	_lame_randrange8
000153 C1                  A   720    	POP	BC
000154 C1                  A   721    	POP	BC
000155 DD77F9              A   722    	LD	(IX+-7),A
                           A   723    ;  211				
                           A   724    ;  212				if ( lx != 0 ) {
                           A   725    .LINE 212
                           A   726    
000158 DD7EFC              A   727    	LD	A,(IX+-4)
00015B B7                  A   728    	OR	A,A
Zilog eZ80 Macro Assembler Version 4.2 (11121401)29-Aug-14     15:35:37     page:  15


PC     Object              I  Line    Source main.src
00015C 28 26 00            A   729    	JR	Z,L_11
                           A   730    ;  213					zl_render_line ( extram
                           A   731    .LINE 213
                           A   732    
00015F DD4EFD              A   733    	LD	C,(IX+-3)
000162 0600                A   734    	LD	B,0
000164 C5                  A   735    	PUSH	BC
000165 DD4EFB              A   736    	LD	C,(IX+-5)
000168 C5                  A   737    	PUSH	BC
000169 DD4EFA              A   738    	LD	C,(IX+-6)
00016C C5                  A   739    	PUSH	BC
00016D DD4EFC              A   740    	LD	C,(IX+-4)
000170 C5                  A   741    	PUSH	BC
000171 DD4EF9              A   742    	LD	C,(IX+-7)
000174 C5                  A   743    	PUSH	BC
000175 0100000C            A   744    	LD	BC,786432
000179 C5                  A   745    	PUSH	BC
00017A CD 00 00 00         A   746    	CALL	_zl_render_line
00017E C1                  A   747    	POP	BC
00017F C1                  A   748    	POP	BC
000180 C1                  A   749    	POP	BC
000181 C1                  A   750    	POP	BC
000182 C1                  A   751    	POP	BC
000183 C1                  A   752    	POP	BC
                           A   753    ;  214				}
000184                     A   754    L_11:
                           A   755    .LINE 214
                           A   756    
                           A   757    ;  215				
                           A   758    ;  216				lx = x;
                           A   759    .LINE 216
                           A   760    
000184 DD7EFB              A   761    	LD	A,(IX+-5)
000187 DD77FC              A   762    	LD	(IX+-4),A
                           A   763    ;  217				ly = y;
                           A   764    .LINE 217
                           A   765    
00018A DD7EFD              A   766    	LD	A,(IX+-3)
00018D DD77FA              A   767    	LD	(IX+-6),A
000190 DD34FE              A   768    	INC	(IX+-2)
                           A   769    ;  218				
                           A   770    ;  219			} // for
000193                     A   771    L_14:
                           A   772    .LINE 219
                           A   773    
000193 DD4EFE              A   774    	LD	C,(IX+-2)
000196 0600                A   775    	LD	B,0
000198 4911E204            A   776    	LD.LIS	DE,1250
00019C C5E1                A   777    	LD	HL,BC
00019E B7                  A   778    	OR	A,A
00019F 40ED52              A   779    	SBC.SIS	HL,DE
0001A2 DA 1F 01 00 00      A   780    	JR	C,L_12
Zilog eZ80 Macro Assembler Version 4.2 (11121401)29-Aug-14     15:35:37     page:  16


PC     Object              I  Line    Source main.src
                           A   781    ;  220	
                           A   782    ;  221			delay_ms_spin ( 20 );		
                           A   783    .LINE 221
                           A   784    
0001A7 01140000            A   785    	LD	BC,20
0001AB C5                  A   786    	PUSH	BC
0001AC CD 00 00 00         A   787    	CALL	_delay_ms_spin
0001B0 C1                  A   788    	POP	BC
                           A   789    ;  222			
                           A   790    ;  223			while(1);
0001B1                     A   791    L_17:
                           A   792    .LINE 223
                           A   793    
0001B1 18 FE 00            A   794    	JR	L_17
                           A   795    ;  224	
                           A   796    ;  225		}
                           A   797    ;  226	#endif
                           A   798    ;  227		
                           A   799    ;  228	#if 1 // blinker - WORKS
                           A   800    ;  229		{
                           A   801    ;  230			PORT pc;
                           A   802    ;  231			UCHAR err;
                           A   803    ;  232			
                           A   804    ;  233			pc.dr = 0x01;
                           A   805    ;  234			pc.ddr = 0; // 0 ddr is output
                           A   806    ;  235			//pc.alt0 = 0; // does not exis
                           A   807    ;  236			pc.alt1 = 0;
                           A   808    ;  237			pc.alt2 = 0;
                           A   809    ;  238			
                           A   810    ;  239			open_PortC ( &pc );
                           A   811    ;  240			//control_PortC ( & pc);
                           A   812    ;  241	
                           A   813    ;  242			err = setmode_PortC ( PORTPIN_Z
                           A   814    ;  243			
                           A   815    ;  244			SETDR_PORTC ( 1 );
                           A   816    ;  245			
                           A   817    ;  246			//SETDR_PORTC ( 0xFF );
                           A   818    ;  247			
                           A   819    ;  248			while ( 1 ) {
0001B4                     A   820    L_21:
                           A   821    .LINE 248
                           A   822    
                           A   823    ;  249				delay_loop ( 150 );
                           A   824    .LINE 249
                           A   825    
0001B4 01960000            A   826    	LD	BC,150
0001B8 C5                  A   827    	PUSH	BC
0001B9 CD 00 00 00         A   828    	CALL	_delay_loop
0001BD C1                  A   829    	POP	BC
                           A   830    ;  250				PC_DR ^= 1;
                           A   831    .LINE 250
                           A   832    
Zilog eZ80 Macro Assembler Version 4.2 (11121401)29-Aug-14     15:35:37     page:  17


PC     Object              I  Line    Source main.src
0001BE ED389E              A   833    	IN0	A,(158)
0001C1 EE01                A   834    	XOR	A,1
0001C3 ED399E              A   835    	OUT0	(158),A
0001C6 18 EC 00            A   836    	JR	L_21
                           A   837    ;  251				//SETDR_PORTC ( 1 );
                           A   838    ;  252			}
                           A   839    ;  253		}		
                           A   840    ;  254	#endif
                           A   841    ;  255	
                           A   842    ;  256		
                           A   843    ;  257	#if 1 // do nothing
                           A   844    ;  258		{
                           A   845    ;  259			char b [ 20 ];
                           A   846    ;  260			UINT8 v = 1;
                           A   847    ;  261			while ( 1 ) {
0001C9                     A   848    L_24:
                           A   849    .LINE 261
                           A   850    
                           A   851    ;  262				lame_itoa ( v, b );
                           A   852    .LINE 262
                           A   853    
0001C9 ED65CA              A   854    	PEA	IX+-54
0001CC DD7EF8              A   855    	LD	A,(IX+-8)
0001CF B7ED62              A   856    	UEXT	HL
0001D2 6F                  A   857    	LD	L,A
0001D3 E5                  A   858    	PUSH	HL
0001D4 CD 00 00 00         A   859    	CALL	_lame_itoa
0001D8 C1                  A   860    	POP	BC
0001D9 C1                  A   861    	POP	BC
0001DA 18 ED 00            A   862    	JR	L_24
                           A   863    ;  263			}
                           A   864    ;  264		}
                           A   865    ;  265	#endif
                           A   866    ;  266		
                           A   867    ;  267		return ( 0 );
                           A   868    ;  268	}
                           A   869    .LINE 268
                           A   870    
0001DD DDF9                A   871    	LD	SP,IX
0001DF DDE1                A   872    	POP	IX
0001E1 C9                  A   873    	RET	
                           A   874    
                           A   875    
                           A   876    ;**************************** _main ***********
                           A   877    ;Name                         Addr/Register   S
                           A   878    ;_zl_render_line                     IMPORT  --
                           A   879    ;_lame_randrange8                    IMPORT  --
                           A   880    ;_fb_render_rect_filled              IMPORT  --
                           A   881    ;_lame_strlen                        IMPORT  --
                           A   882    ;_lame_itoa                          IMPORT  --
                           A   883    ;_write_UART0                        IMPORT  --
                           A   884    ;_open_UART0                         IMPORT  --
Zilog eZ80 Macro Assembler Version 4.2 (11121401)29-Aug-14     15:35:37     page:  18


PC     Object              I  Line    Source main.src
                           A   885    ;_delay_ms_spin                      IMPORT  --
                           A   886    ;b                                    IX-54    
                           A   887    ;b                                    IX-34    
                           A   888    ;u0                                   IX-18    
                           A   889    ;v                                     IX-8    
                           A   890    ;c                                     IX-7    
                           A   891    ;ly                                    IX-6    
                           A   892    ;x                                     IX-5    
                           A   893    ;lx                                    IX-4    
                           A   894    ;y                                     IX-3    
                           A   895    ;i                                     IX-2    
                           A   896    ;i                                     IX-1    
                           A   897    
                           A   898    
                           A   899    ; Stack Frame Size: 63 (bytes)
                           A   900    ;       Spill Code: 0 (instruction)
                           A   901    
                           A   902    
                           A   903    .ENDFUNC "main",268,"_main"
                           A   904    	SEGMENT STRSECT
000000                     A   905    L__3:
000000 0A00                A   906    	DB	10,0
                           A   907    	XREF _zl_render_line:ROM
                           A   908    	XREF _fb_render_rect_filled:ROM
                           A   909    	XREF _delay_ms_spin:ROM
                           A   910    	XREF _lame_randrange8:ROM
                           A   911    	XREF _lame_strlen:ROM
                           A   912    	XREF _lame_itoa:ROM
                           A   913    	XREF _write_UART0:ROM
                           A   914    	XREF _open_UART0:ROM
                           A   915    	XREF __stoiu:ROM
                           A   916    	XDEF _main
                           A   917    	END


Errors: 0
Warnings: 0
Lines Assembled: 918
