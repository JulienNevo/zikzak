Zilog eZ80 Macro Assembler Version 4.2 (11121401)03-Jun-16     17:40:42     page:   1


PC     Object              I  Line    Source 
                           A     1    ; Zilog eZ80 ANSI C Compiler Release 3.4
                           A     2    ; -noglobalopt -nolocalcse -optsize -nomodsect 
                           A     3    ; -padbranch -debug -peephole -const=ROM 
                           A     4    	FILE	"..\MAIN.C"
                           A     5    	.assume ADL=1
                           A     6    .DEBUG "C"
                           A     7    .PADBRANCH CCODE
                           A     8    	SEGMENT CODE
                           A     9    .BEGREC "NONAME0",4
                           A    10    .DEFINE "dr"
                           A    11    .VALUE 0
                           A    12    .CLASS 8
                           A    13    .TYPE 12
                           A    14    .ENDEF
                           A    15    .DEFINE "ddr"
                           A    16    .VALUE 1
                           A    17    .CLASS 8
                           A    18    .TYPE 12
                           A    19    .ENDEF
                           A    20    .DEFINE "alt1"
                           A    21    .VALUE 2
                           A    22    .CLASS 8
                           A    23    .TYPE 12
                           A    24    .ENDEF
                           A    25    .DEFINE "alt2"
                           A    26    .VALUE 3
                           A    27    .CLASS 8
                           A    28    .TYPE 12
                           A    29    .ENDEF
                           A    30    .ENDREC "NONAME0"
                           A    31    .BEGREC "NONAME1",10
                           A    32    .DEFINE "uartMode"
                           A    33    .VALUE 0
                           A    34    .CLASS 8
                           A    35    .TYPE 2
                           A    36    .ENDEF
                           A    37    .DEFINE "baudRate"
                           A    38    .VALUE 1
                           A    39    .CLASS 8
                           A    40    .TYPE 4
                           A    41    .ENDEF
                           A    42    .DEFINE "dataBits"
                           A    43    .VALUE 4
                           A    44    .CLASS 8
                           A    45    .TYPE 12
                           A    46    .ENDEF
                           A    47    .DEFINE "stopBits"
                           A    48    .VALUE 5
                           A    49    .CLASS 8
                           A    50    .TYPE 12
                           A    51    .ENDEF
                           A    52    .DEFINE "parity"
Zilog eZ80 Macro Assembler Version 4.2 (11121401)03-Jun-16     17:40:42     page:   2


PC     Object              I  Line    Source main.src
                           A    53    .VALUE 6
                           A    54    .CLASS 8
                           A    55    .TYPE 12
                           A    56    .ENDEF
                           A    57    .DEFINE "fifoTriggerLevel"
                           A    58    .VALUE 7
                           A    59    .CLASS 8
                           A    60    .TYPE 12
                           A    61    .ENDEF
                           A    62    .DEFINE "hwFlowControl"
                           A    63    .VALUE 8
                           A    64    .CLASS 8
                           A    65    .TYPE 12
                           A    66    .ENDEF
                           A    67    .DEFINE "swFlowControl"
                           A    68    .VALUE 9
                           A    69    .CLASS 8
                           A    70    .TYPE 12
                           A    71    .ENDEF
                           A    72    .ENDREC "NONAME1"
                           A    73    .BEGREC "NONAME2",9
                           A    74    .DEFINE "pBuffer"
                           A    75    .VALUE 0
                           A    76    .CLASS 8
                           A    77    .TYPE 44
                           A    78    .ENDEF
                           A    79    .DEFINE "next_in"
                           A    80    .VALUE 3
                           A    81    .CLASS 8
                           A    82    .TYPE 13
                           A    83    .ENDEF
                           A    84    .DEFINE "next_out"
                           A    85    .VALUE 5
                           A    86    .CLASS 8
                           A    87    .TYPE 13
                           A    88    .ENDEF
                           A    89    .DEFINE "size"
                           A    90    .VALUE 7
                           A    91    .CLASS 8
                           A    92    .TYPE 13
                           A    93    .ENDEF
                           A    94    .ENDREC "NONAME2"
                           A    95    .BEGREC "NONAME3",6
                           A    96    .DEFINE "quot"
                           A    97    .VALUE 0
                           A    98    .CLASS 8
                           A    99    .TYPE 4
                           A   100    .ENDEF
                           A   101    .DEFINE "rem"
                           A   102    .VALUE 3
                           A   103    .CLASS 8
                           A   104    .TYPE 4
Zilog eZ80 Macro Assembler Version 4.2 (11121401)03-Jun-16     17:40:42     page:   3


PC     Object              I  Line    Source main.src
                           A   105    .ENDEF
                           A   106    .ENDREC "NONAME3"
                           A   107    .BEGREC "NONAME4",8
                           A   108    .DEFINE "quot"
                           A   109    .VALUE 0
                           A   110    .CLASS 8
                           A   111    .TYPE 5
                           A   112    .ENDEF
                           A   113    .DEFINE "rem"
                           A   114    .VALUE 4
                           A   115    .CLASS 8
                           A   116    .TYPE 5
                           A   117    .ENDEF
                           A   118    .ENDREC "NONAME4"
                           A   119    .BEGREC "header",6
                           A   120    .DEFINE "s"
                           A   121    .VALUE 0
                           A   122    .CLASS 11
                           A   123    .TAG "NONAME5"
                           A   124    .TYPE 8
                           A   125    .ENDEF
                           A   126    .DEFINE "x"
                           A   127    .VALUE 0
                           A   128    .CLASS 11
                           A   129    .TYPE 2
                           A   130    .ENDEF
                           A   131    .ENDREC "header"
                           A   132    .BEGREC "NONAME5",6
                           A   133    .DEFINE "ptr"
                           A   134    .VALUE 0
                           A   135    .CLASS 8
                           A   136    .TAG "header"
                           A   137    .TYPE 40
                           A   138    .ENDEF
                           A   139    .DEFINE "size"
                           A   140    .VALUE 3
                           A   141    .CLASS 8
                           A   142    .TYPE 14
                           A   143    .ENDEF
                           A   144    .ENDREC "NONAME5"
000000                     A   145    _delay_loop:
                           A   146    .DEFINE "_delay_loop"
                           A   147    
                           A   148    .VALUE _delay_loop
                           A   149    
                           A   150    .CLASS 3
                           A   151    
                           A   152    .TYPE 65
                           A   153    
                           A   154    .ENDEF
                           A   155    
                           A   156    .BEGFUNC "delay_loop",17,"_delay_loop"
Zilog eZ80 Macro Assembler Version 4.2 (11121401)03-Jun-16     17:40:42     page:   4


PC     Object              I  Line    Source main.src
                           A   157    
                           A   158    .LINE 17
                           A   159    
                           A   160    .DEFINE "c"
                           A   161    
                           A   162    .CLASS 65
                           A   163    
                           A   164    .VALUE 6
                           A   165    
                           A   166    .TYPE 14
                           A   167    
000000 DDE5                A   168    	PUSH	IX
000002 DD210000 00         A   169    	LD	IX,0
000007 DD39                A   170    	ADD	IX,SP
                           A   171    .ENDEF
                           A   172    
000009                     A   173    L_1:
                           A   174    .LINE 18
                           A   175    
000009 DD2706              A   176    	LD	HL,(IX+6)
00000C CD 00 00 00         A   177    	CALL	__icmpzero
000010 28 0D 00            A   178    	JR	Z,L_3
                           A   179    .LINE 19
                           A   180    
000013 DD3106              A   181    	LD	IY,(IX+6)
000016 ED33FF              A   182    	LEA	IY,IY+-1
000019 DD3E06              A   183    	LD	(IX+6),IY
                           A   184    .LINE 20
                           A   185    
00001C 18 EB 00            A   186    	JR	L_1
00001F                     A   187    L_3:
                           A   188    .LINE 21
                           A   189    
00001F DDF9                A   190    	LD	SP,IX
000021 DDE1                A   191    	POP	IX
000023 C9                  A   192    	RET	
                           A   193    
                           A   194    
                           A   195    ;**************************** _delay_loop *****
                           A   196    ;Name                         Addr/Register   S
                           A   197    ;c                                     IX+6    
                           A   198    
                           A   199    
                           A   200    ; Stack Frame Size: 9 (bytes)
                           A   201    ;       Spill Code: 0 (instruction)
                           A   202    
                           A   203    
                           A   204    .ENDFUNC "delay_loop",21,"_delay_loop"
                           A   205    .BEGREC "NONAME6",4
                           A   206    .DEFINE "x"
                           A   207    .VALUE 0
                           A   208    .CLASS 8
Zilog eZ80 Macro Assembler Version 4.2 (11121401)03-Jun-16     17:40:42     page:   5


PC     Object              I  Line    Source main.src
                           A   209    .TYPE 12
                           A   210    .ENDEF
                           A   211    .DEFINE "y"
                           A   212    .VALUE 1
                           A   213    .CLASS 8
                           A   214    .TYPE 12
                           A   215    .ENDEF
                           A   216    .DEFINE "f"
                           A   217    .VALUE 2
                           A   218    .CLASS 8
                           A   219    .TYPE 12
                           A   220    .ENDEF
                           A   221    .DEFINE "_u"
                           A   222    .VALUE 3
                           A   223    .CLASS 8
                           A   224    .TYPE 12
                           A   225    .ENDEF
                           A   226    .ENDREC "NONAME6"
                           A   227    ;    1	// Chip Selects:
                           A   228    ;    2	// Built in RAM	B7F000 - B7FFFF    -> r
                           A   229    ;    3	//		- is always at ___F000->___FFFF
                           A   230    ;    4	//		- currently seems flashed RAM a
                           A   231    ;    5	//      - 'enable data ram' and address
                           A   232    ;    6	// Build in ROM in F93 chip is 64; __00
                           A   233    ;    7	//
                           A   234    ;    8	// CS0   e8 0   0c0000 - 0dffff    -> r
                           A   235    ;    9	//                     - 7dffff    -> r
                           A   236    ;   10	// CS1   e8 0   1c0000 - 1dffff    -> r
                           A   237    ;   11	// CS2   e8 0   2c0000 - 2cffff    -> a
                           A   238    ;   12	//
                           A   239    ;   13	// 2.457MHz oscilator in place
                           A   240    ;   14	
                           A   241    ;   15	#include <eZ80.h>
                           A   242    ;   16	#include <uart.h>
                           A   243    ;   17	#include <gpio.h>
                           A   244    ;   18	#include <stdlib.h>
                           A   245    ;   19	#include <string.h>
                           A   246    ;   20	
                           A   247    ;   21	#include "skeelib.h"
                           A   248    ;   22	#include "framebuffer.h"
                           A   249    ;   23	#include <lib_ay-3-8912.h>
                           A   250    ;   24	#include "lib_fontrender.h"
                           A   251    ;   25	#include "lib_ps2_keyboard.h"
                           A   252    ;   26	#include "menu.h"
                           A   253    ;   27	#include "HAL.h"
                           A   254    ;   28	#include "bios_video.h"
                           A   255    ;   29	#include "demo.h"
                           A   256    ;   30	
                           A   257    ;   31	int main ( ) {
000024                     A   258    _main:
                           A   259    .DEFINE "_main"
                           A   260    
Zilog eZ80 Macro Assembler Version 4.2 (11121401)03-Jun-16     17:40:42     page:   6


PC     Object              I  Line    Source main.src
                           A   261    .VALUE _main
                           A   262    
                           A   263    .CLASS 2
                           A   264    
                           A   265    .TYPE 68
                           A   266    
                           A   267    .ENDEF
                           A   268    
                           A   269    .BEGFUNC "main",31,"_main"
                           A   270    
                           A   271    .LINE 31
                           A   272    
                           A   273    .DEFINE "curr"
                           A   274    
                           A   275    .CLASS 65
                           A   276    
                           A   277    .VALUE -3
                           A   278    
                           A   279    .TYPE 44
                           A   280    
                           A   281    .ENDEF
                           A   282    
                           A   283    .DEFINE "extram"
                           A   284    
                           A   285    .CLASS 65
                           A   286    
                           A   287    .VALUE -6
                           A   288    
                           A   289    .TYPE 44
                           A   290    
                           A   291    .ENDEF
                           A   292    
                           A   293    .DEFINE "iter"
                           A   294    
                           A   295    .CLASS 65
                           A   296    
                           A   297    .VALUE -7
                           A   298    
                           A   299    .TYPE 12
                           A   300    
                           A   301    .ENDEF
                           A   302    
                           A   303    .DEFINE "i"
                           A   304    
                           A   305    .CLASS 65
                           A   306    
                           A   307    .VALUE -8
                           A   308    
                           A   309    .TYPE 12
                           A   310    
                           A   311    .ENDEF
                           A   312    
Zilog eZ80 Macro Assembler Version 4.2 (11121401)03-Jun-16     17:40:42     page:   7


PC     Object              I  Line    Source main.src
                           A   313    .DEFINE "p"
                           A   314    
                           A   315    .CLASS 65
                           A   316    
                           A   317    .VALUE -9
                           A   318    
                           A   319    .TYPE 12
                           A   320    
                           A   321    .ENDEF
                           A   322    
                           A   323    .DEFINE "inbuf"
                           A   324    
                           A   325    .CLASS 65
                           A   326    
                           A   327    .VALUE -14
                           A   328    
                           A   329    .DIM 5
                           A   330    
                           A   331    .TYPE 98
                           A   332    
                           A   333    .ENDEF
                           A   334    
                           A   335    .DEFINE "retval"
                           A   336    
                           A   337    .CLASS 65
                           A   338    
                           A   339    .VALUE -15
                           A   340    
                           A   341    .TYPE 12
                           A   342    
                           A   343    .ENDEF
                           A   344    
                           A   345    .DEFINE "nbytes"
                           A   346    
                           A   347    .CLASS 65
                           A   348    
                           A   349    .VALUE -18
                           A   350    
                           A   351    .TYPE 14
                           A   352    
                           A   353    .ENDEF
                           A   354    
                           A   355    .DEFINE "u0"
                           A   356    
                           A   357    .CLASS 65
                           A   358    
                           A   359    .VALUE -28
                           A   360    
                           A   361    .TAG "NONAME1"
                           A   362    
                           A   363    .TYPE 8
                           A   364    
Zilog eZ80 Macro Assembler Version 4.2 (11121401)03-Jun-16     17:40:42     page:   8


PC     Object              I  Line    Source main.src
                           A   365    .ENDEF
                           A   366    
                           A   367    .DEFINE "b"
                           A   368    
                           A   369    .CLASS 65
                           A   370    
                           A   371    .VALUE -38
                           A   372    
                           A   373    .DIM 10
                           A   374    
                           A   375    .TYPE 98
                           A   376    
                           A   377    .ENDEF
                           A   378    
                           A   379    .DEFINE "b"
                           A   380    
                           A   381    .CLASS 65
                           A   382    
                           A   383    .VALUE -54
                           A   384    
                           A   385    .DIM 16
                           A   386    
                           A   387    .TYPE 98
                           A   388    
                           A   389    .ENDEF
                           A   390    
                           A   391    .DEFINE "spritelist"
                           A   392    
                           A   393    .CLASS 65
                           A   394    
                           A   395    .VALUE -182
                           A   396    
                           A   397    .DIM 128
                           A   398    
                           A   399    .TYPE 108
                           A   400    
                           A   401    .ENDEF
                           A   402    
000024 DDE5                A   403    	PUSH	IX
000026 DD210000 00         A   404    	LD	IX,0
00002B DD39                A   405    	ADD	IX,SP
00002D 214AFFFF            A   406    	LD	HL,-182
000031 39                  A   407    	ADD	HL,SP
000032 F9                  A   408    	LD	SP,HL
                           A   409    ;   32	
                           A   410    ;   33	#if 1 // sleep for a few seconds up fro
                           A   411    ;   34		{
                           A   412    ;   35			delay_ms_spin(1000);
                           A   413    .LINE 35
                           A   414    
000033 01E80300            A   415    	LD	BC,1000
000037 C5                  A   416    	PUSH	BC
Zilog eZ80 Macro Assembler Version 4.2 (11121401)03-Jun-16     17:40:42     page:   9


PC     Object              I  Line    Source main.src
000038 CD 00 00 00         A   417    	CALL	_delay_ms_spin
00003C C1                  A   418    	POP	BC
                           A   419    ;   36			delay_ms_spin(1000);
                           A   420    .LINE 36
                           A   421    
00003D 01E80300            A   422    	LD	BC,1000
000041 C5                  A   423    	PUSH	BC
000042 CD 00 00 00         A   424    	CALL	_delay_ms_spin
000046 C1                  A   425    	POP	BC
                           A   426    ;   37		}
                           A   427    ;   38	#endif
                           A   428    ;   39	
                           A   429    ;   40		// enable interupts
                           A   430    ;   41		_init_default_vectors();
                           A   431    .LINE 41
                           A   432    
000047 CD 00 00 00         A   433    	CALL	__init_default_vectors
                           A   434    ;   42	
                           A   435    ;   43	#if 0 // GPIOB for lulz debug output
                           A   436    ;   44		{
                           A   437    ;   45			PORT pb;
                           A   438    ;   46			UCHAR err;
                           A   439    ;   47	
                           A   440    ;   48			// enable gpio output mode1 por
                           A   441    ;   49			pb.dr = 0; // default value 0of
                           A   442    ;   50			pb.ddr = 0; // output=0, input=
                           A   443    ;   51			pb.alt1 = 0;
                           A   444    ;   52			pb.alt2 = 0;
                           A   445    ;   53				
                           A   446    ;   54			open_PortC ( &pb );
                           A   447    ;   55	
                           A   448    ;   56			err = setmode_PortB ( PORTPIN_Z
                           A   449    ;   57		}
                           A   450    ;   58	#endif
                           A   451    ;   59		
                           A   452    ;   60	#if 1 // uart logger - WORKS
                           A   453    ;   61		{
                           A   454    ;   62			// F93 default is 20MHz - happe
                           A   455    ;   63			// uart0 is on port d
                           A   456    ;   64			// uart1 is on port c
                           A   457    ;   65			
                           A   458    ;   66			//UCHAR open_UARTx(UART * pUART
                           A   459    ;   67			
                           A   460    ;   68			UART u0;
                           A   461    ;   69			char b [ 16 ];
                           A   462    ;   70			unsigned char i;
                           A   463    ;   71			
                           A   464    ;   72			u0.uartMode = POLL; //INTERRUPT
                           A   465    .LINE 72
                           A   466    
00004B DD36E400            A   467    	LD	(IX+-28),0
                           A   468    ;   73			u0.baudRate =  BAUD_38400; //BA
Zilog eZ80 Macro Assembler Version 4.2 (11121401)03-Jun-16     17:40:42     page:  10


PC     Object              I  Line    Source main.src
                           A   469    .LINE 73
                           A   470    
00004F 01009600            A   471    	LD	BC,38400
000053 DD0FE5              A   472    	LD	(IX+-27),BC
                           A   473    ;   74			u0.dataBits = DATABITS_8;
                           A   474    .LINE 74
                           A   475    
000056 DD36E808            A   476    	LD	(IX+-24),8
                           A   477    ;   75			u0.stopBits = STOPBITS_1;
                           A   478    .LINE 75
                           A   479    
00005A DD36E901            A   480    	LD	(IX+-23),1
                           A   481    ;   76			u0.parity = PAR_NOPARITY;
                           A   482    .LINE 76
                           A   483    
00005E DD36EA00            A   484    	LD	(IX+-22),0
                           A   485    ;   77			u0.fifoTriggerLevel = FIFO_TRGL
                           A   486    .LINE 77
                           A   487    
000062 DD36EB01            A   488    	LD	(IX+-21),1
                           A   489    ;   78			u0.hwFlowControl = DISABLE_HWFL
                           A   490    .LINE 78
                           A   491    
000066 DD36EC00            A   492    	LD	(IX+-20),0
                           A   493    ;   79			u0.swFlowControl = DISABLE_SWFL
                           A   494    .LINE 79
                           A   495    
00006A DD36ED00            A   496    	LD	(IX+-19),0
                           A   497    ;   80			
                           A   498    ;   81			open_UART0 ( &u0 );
                           A   499    .LINE 81
                           A   500    
00006E ED65E4              A   501    	PEA	IX+-28
000071 CD 00 00 00         A   502    	CALL	_open_UART0
000075 C1                  A   503    	POP	BC
                           A   504    ;   82			
                           A   505    ;   83			b [ 0 ] = 'A';
                           A   506    .LINE 83
                           A   507    
000076 DD36CA41            A   508    	LD	(IX+-54),65
                           A   509    ;   84			b [ 1 ] = 'B';
                           A   510    .LINE 84
                           A   511    
00007A ED22CA              A   512    	LEA	HL,IX+-54
00007D 23                  A   513    	INC	HL
00007E 3642                A   514    	LD	(HL),66
                           A   515    ;   85			b [ 2 ] = 'C';
                           A   516    .LINE 85
                           A   517    
000080 ED22CC              A   518    	LEA	HL,IX+-52
000083 3643                A   519    	LD	(HL),67
                           A   520    ;   86			b [ 3 ] = '\0';
Zilog eZ80 Macro Assembler Version 4.2 (11121401)03-Jun-16     17:40:42     page:  11


PC     Object              I  Line    Source main.src
                           A   521    .LINE 86
                           A   522    
000085 ED22CD              A   523    	LEA	HL,IX+-51
000088 3600                A   524    	LD	(HL),0
00008A 18 0A 00            A   525    	JR	L_5
                           A   526    ;   87			
                           A   527    ;   88			for ( i = 0; i < 5; i++ ) {
00008D                     A   528    L_6:
                           A   529    .LINE 88
                           A   530    
00008D DD7EF8              A   531    	LD	A,(IX+-8)
000090 FE05                A   532    	CP	A,5
000092 38 09               A   533    	JR	C,L_8
000094 18 1B               A   534    	JR	L_9
000096                     A   535    L_5:
000096 DD36F800            A   536    	LD	(IX+-8),0
00009A 18 F1 00            A   537    	JR	L_6
00009D                     A   538    L_8:
                           A   539    ;   89				write_UART0 ( b, 3 );
                           A   540    .LINE 89
                           A   541    
00009D 01030000            A   542    	LD	BC,3
0000A1 C5                  A   543    	PUSH	BC
0000A2 ED65CA              A   544    	PEA	IX+-54
0000A5 CD 00 00 00         A   545    	CALL	_write_UART0
0000A9 C1                  A   546    	POP	BC
0000AA C1                  A   547    	POP	BC
0000AB DD34F8              A   548    	INC	(IX+-8)
                           A   549    ;   90			}
                           A   550    .LINE 90
                           A   551    
0000AE 18 DD 00            A   552    	JR	L_6
0000B1                     A   553    L_9:
                           A   554    ;   91			
                           A   555    ;   92			lame_itoa ( (int)40, b );
                           A   556    .LINE 92
                           A   557    
0000B1 ED65CA              A   558    	PEA	IX+-54
0000B4 01280000            A   559    	LD	BC,40
0000B8 C5                  A   560    	PUSH	BC
0000B9 CD 00 00 00         A   561    	CALL	_lame_itoa
0000BD C1                  A   562    	POP	BC
0000BE C1                  A   563    	POP	BC
                           A   564    ;   93			
                           A   565    ;   94			write_UART0 ( b, lame_strlen ( 
                           A   566    .LINE 94
                           A   567    
0000BF ED65CA              A   568    	PEA	IX+-54
0000C2 CD 00 00 00         A   569    	CALL	_lame_strlen
0000C6 C1                  A   570    	POP	BC
0000C7 E5C1                A   571    	LD	BC,HL
0000C9 CD 00 00 00         A   572    	CALL	__stoiu
Zilog eZ80 Macro Assembler Version 4.2 (11121401)03-Jun-16     17:40:42     page:  12


PC     Object              I  Line    Source main.src
0000CD E5                  A   573    	PUSH	HL
0000CE ED65CA              A   574    	PEA	IX+-54
0000D1 CD 00 00 00         A   575    	CALL	_write_UART0
0000D5 C1                  A   576    	POP	BC
0000D6 C1                  A   577    	POP	BC
                           A   578    ;   95			write_UART0 ( "\n", 1 );
                           A   579    .LINE 95
                           A   580    
0000D7 01010000            A   581    	LD	BC,1
0000DB C5                  A   582    	PUSH	BC
0000DC 01 00 00 00         A   583    	LD	BC,L__3
0000E0 C5                  A   584    	PUSH	BC
0000E1 CD 00 00 00         A   585    	CALL	_write_UART0
0000E5 C1                  A   586    	POP	BC
0000E6 C1                  A   587    	POP	BC
                           A   588    ;   96			flush_UART0 ( FLUSHFIFO_ALL );
                           A   589    .LINE 96
                           A   590    
0000E7 01030000            A   591    	LD	BC,3
0000EB C5                  A   592    	PUSH	BC
0000EC CD 00 00 00         A   593    	CALL	_flush_UART0
0000F0 C1                  A   594    	POP	BC
                           A   595    ;   97			
                           A   596    ;   98		}
                           A   597    ;   99	#endif
                           A   598    ;  100	
                           A   599    ;  101	#if 1 // keyboard isr interrupt test; s
                           A   600    ;  102		{
                           A   601    ;  103			uint8_t p;
                           A   602    ;  104			char b [ 10 ];
                           A   603    ;  105			
                           A   604    ;  106			keyb_setup();
                           A   605    .LINE 106
                           A   606    
0000F1 CD 00 00 00         A   607    	CALL	_keyb_setup
                           A   608    ;  107			
                           A   609    ;  108			while ( 1 ) {
0000F5                     A   610    L_10:
                           A   611    .LINE 108
                           A   612    
                           A   613    ;  109				p = packet_fetch_blocking()
                           A   614    .LINE 109
                           A   615    
0000F5 CD 00 00 00         A   616    	CALL	_packet_fetch_blocking
0000F9 DD77F7              A   617    	LD	(IX+-9),A
                           A   618    ;  110	
                           A   619    ;  111				// scancode
                           A   620    ;  112				lame_itoa ( (int)p, b );
                           A   621    .LINE 112
                           A   622    
0000FC ED65DA              A   623    	PEA	IX+-38
0000FF DD7EF7              A   624    	LD	A,(IX+-9)
Zilog eZ80 Macro Assembler Version 4.2 (11121401)03-Jun-16     17:40:42     page:  13


PC     Object              I  Line    Source main.src
000102 B7ED62              A   625    	UEXT	HL
000105 6F                  A   626    	LD	L,A
000106 E5                  A   627    	PUSH	HL
000107 CD 00 00 00         A   628    	CALL	_lame_itoa
00010B C1                  A   629    	POP	BC
00010C C1                  A   630    	POP	BC
                           A   631    ;  113				write_UART0 ( b, lame_strle
                           A   632    .LINE 113
                           A   633    
00010D ED65DA              A   634    	PEA	IX+-38
000110 CD 00 00 00         A   635    	CALL	_lame_strlen
000114 C1                  A   636    	POP	BC
000115 E5C1                A   637    	LD	BC,HL
000117 CD 00 00 00         A   638    	CALL	__stoiu
00011B E5                  A   639    	PUSH	HL
00011C ED65DA              A   640    	PEA	IX+-38
00011F CD 00 00 00         A   641    	CALL	_write_UART0
000123 C1                  A   642    	POP	BC
000124 C1                  A   643    	POP	BC
                           A   644    ;  114				write_UART0 ( "\n", 1 );
                           A   645    .LINE 114
                           A   646    
000125 01010000            A   647    	LD	BC,1
000129 C5                  A   648    	PUSH	BC
00012A 01 02 00 00         A   649    	LD	BC,L__4
00012E C5                  A   650    	PUSH	BC
00012F CD 00 00 00         A   651    	CALL	_write_UART0
000133 C1                  A   652    	POP	BC
000134 C1                  A   653    	POP	BC
                           A   654    ;  115				// mapped char
                           A   655    ;  116				b [ 0 ] = map_scan_code ( p
                           A   656    .LINE 116
                           A   657    
000135 DD4EF7              A   658    	LD	C,(IX+-9)
000138 0600                A   659    	LD	B,0
00013A C5                  A   660    	PUSH	BC
00013B CD 00 00 00         A   661    	CALL	_map_scan_code
00013F C1                  A   662    	POP	BC
000140 DD77DA              A   663    	LD	(IX+-38),A
                           A   664    ;  117				b [ 1 ] = '\n';
                           A   665    .LINE 117
                           A   666    
000143 ED22DA              A   667    	LEA	HL,IX+-38
000146 23                  A   668    	INC	HL
000147 360A                A   669    	LD	(HL),10
                           A   670    ;  118				b [ 2 ] = '\0';
                           A   671    .LINE 118
                           A   672    
000149 ED22DC              A   673    	LEA	HL,IX+-36
00014C 3600                A   674    	LD	(HL),0
                           A   675    ;  119				write_UART0 ( b, 2 );
                           A   676    .LINE 119
Zilog eZ80 Macro Assembler Version 4.2 (11121401)03-Jun-16     17:40:42     page:  14


PC     Object              I  Line    Source main.src
                           A   677    
00014E 01020000            A   678    	LD	BC,2
000152 C5                  A   679    	PUSH	BC
000153 ED65DA              A   680    	PEA	IX+-38
000156 CD 00 00 00         A   681    	CALL	_write_UART0
00015A C1                  A   682    	POP	BC
00015B C1                  A   683    	POP	BC
                           A   684    ;  120	
                           A   685    ;  121				//flush_UART0 ( FLUSHFIFO_A
                           A   686    ;  122	
                           A   687    ;  123				//delay_loop ( 10 );
                           A   688    ;  124			}
                           A   689    .LINE 124
                           A   690    
00015C 18 97 00            A   691    	JR	L_10
                           A   692    ;  125	
                           A   693    ;  126		}
                           A   694    ;  127	#endif
                           A   695    ;  128		
                           A   696    ;  129	#if 0 // ram test - and why aren't I ma
                           A   697    ;  130		{
                           A   698    ;  131			unsigned char *extram, *iter, *
                           A   699    ;  132			unsigned char v;
                           A   700    ;  133			char msg [ 64 ];
                           A   701    ;  134			
                           A   702    ;  135			extram = (unsigned char *) EXTR
                           A   703    ;  136	
                           A   704    ;  137			max = extram;
                           A   705    ;  138			max += 65536; max += 65536;
                           A   706    ;  139			max += 65536; max += 65536;
                           A   707    ;  140			max += 65536; max += 65536;
                           A   708    ;  141			max += 65536; max += 65536;
                           A   709    ;  142	
                           A   710    ;  143			// writer stage
                           A   711    ;  144			strcpy ( msg, "Memory test: wri
                           A   712    ;  145			write_UART0 ( msg, lame_strlen 
                           A   713    ;  146			
                           A   714    ;  147			iter = extram;
                           A   715    ;  148			v = 0;
                           A   716    ;  149			
                           A   717    ;  150			while ( iter != max ) {
                           A   718    ;  151				*iter = v;
                           A   719    ;  152				v++;
                           A   720    ;  153				iter++;
                           A   721    ;  154			}
                           A   722    ;  155			
                           A   723    ;  156			// verification stage
                           A   724    ;  157			strcpy ( msg, "Memory test: ver
                           A   725    ;  158			write_UART0 ( msg, lame_strlen 
                           A   726    ;  159	
                           A   727    ;  160			iter = extram;
                           A   728    ;  161			v = 0;
Zilog eZ80 Macro Assembler Version 4.2 (11121401)03-Jun-16     17:40:42     page:  15


PC     Object              I  Line    Source main.src
                           A   729    ;  162			
                           A   730    ;  163			while ( iter != max ) {
                           A   731    ;  164				if ( *iter != v ) {
                           A   732    ;  165					strcpy ( msg, "Memory t
                           A   733    ;  166					write_UART0 ( msg, lame
                           A   734    ;  167					break;
                           A   735    ;  168				}
                           A   736    ;  169	
                           A   737    ;  170				v++;
                           A   738    ;  171				iter++;
                           A   739    ;  172			}
                           A   740    ;  173			
                           A   741    ;  174			if ( iter == max ) {
                           A   742    ;  175				strcpy ( msg, "Memory test:
                           A   743    ;  176				write_UART0 ( msg, lame_str
                           A   744    ;  177			}
                           A   745    ;  178	
                           A   746    ;  179		}
                           A   747    ;  180	#endif
                           A   748    ;  181		
                           A   749    ;  182	#if 0 // ext audio AY-3-8912 test
                           A   750    ;  183		{
                           A   751    ;  184			
                           A   752    ;  185			ay_gpio_setup();
                           A   753    ;  186	
                           A   754    ;  187			while ( 1 ) {
                           A   755    ;  188				delay_ms_spin ( 600 );
                           A   756    ;  189				ym_play_demo();
                           A   757    ;  190			} // while
                           A   758    ;  191			
                           A   759    ;  192		}
                           A   760    ;  193	#endif
                           A   761    ;  194	
                           A   762    ;  195	#if 1 // main menu
                           A   763    ;  196	{
                           A   764    ;  197		unsigned char *extram;
                           A   765    ;  198		unsigned char spritelist [ TM_SPRIT
                           A   766    ;  199		unsigned char *curr = spritelist;
                           A   767    ;  200		unsigned char iter;
                           A   768    ;  201	
                           A   769    ;  202		vb_enable_vblank_interupt();
                           A   770    ;  203		
                           A   771    ;  204		extram = (UINT8 *) TM_VRAM_FB;
                           A   772    ;  205		memset ( extram, 1, TM_TEXTLINE_STR
                           A   773    ;  206		
                           A   774    ;  207		strcpy ( extram, "ZikZak SBC r3 512
                           A   775    ;  208		strcpy ( extram + TM_TEXTLINE_STRID
                           A   776    ;  209			
                           A   777    ;  210		extram = (UINT8 *) TM_VRAM_ATTR;
                           A   778    ;  211		memset ( extram, 1, TM_TEXTLINE_STR
                           A   779    ;  212		
                           A   780    ;  213		extram = (UINT8 *) TM_SPRITE_LIST_B
Zilog eZ80 Macro Assembler Version 4.2 (11121401)03-Jun-16     17:40:42     page:  16


PC     Object              I  Line    Source main.src
                           A   781    ;  214		memset ( extram, 0, TM_SPRITE_MAX *
                           A   782    ;  215		*((UINT8*)TM_SPRITE_ACTIVE) = 4;
                           A   783    ;  216	
                           A   784    ;  217		curr [ 0 ] =  30; curr [ 1 ] =  30;
                           A   785    ;  218		curr [ 0 ] =  60; curr [ 1 ] =  60;
                           A   786    ;  219		curr [ 0 ] =  90; curr [ 1 ] =  90;
                           A   787    ;  220		curr [ 0 ] = 120; curr [ 1 ] = 120;
                           A   788    ;  221		
                           A   789    ;  222		// move sprites
                           A   790    ;  223		while ( 1 ) {
00015F                     A   791    L_35:
                           A   792    .LINE 223
                           A   793    
                           A   794    ;  224			
                           A   795    ;  225			curr = spritelist;
                           A   796    .LINE 225
                           A   797    
00015F DDE5E1              A   798    	LD	HL,IX
000162 014AFFFF            A   799    	LD	BC,-182
000166 09                  A   800    	ADD	HL,BC
000167 DD2FFD              A   801    	LD	(IX+-3),HL
00016A 18 0C 00            A   802    	JR	L_30
                           A   803    ;  226			for ( iter = 0; iter < 4; iter+
00016D                     A   804    L_31:
                           A   805    .LINE 226
                           A   806    
00016D DD7EF9              A   807    	LD	A,(IX+-7)
000170 FE04                A   808    	CP	A,4
000172 38 0B               A   809    	JR	C,L_33
000174 C3 EA 02 00         A   810    	JR	L_34
000178                     A   811    L_30:
000178 DD36F900            A   812    	LD	(IX+-7),0
00017C 18 EF 00            A   813    	JR	L_31
00017F                     A   814    L_33:
                           A   815    ;  227			
                           A   816    ;  228	#if 1		
                           A   817    ;  229		    if ( curr [ 3 ] < 64 ) {
                           A   818    .LINE 229
                           A   819    
00017F DD31FD              A   820    	LD	IY,(IX+-3)
000182 ED2303              A   821    	LEA	HL,IY+3
000185 7E                  A   822    	LD	A,(HL)
000186 B7ED62              A   823    	UEXT	HL
000189 6F                  A   824    	LD	L,A
00018A 01400000            A   825    	LD	BC,64
00018E B7                  A   826    	OR	A,A
00018F ED42                A   827    	SBC	HL,BC
000191 CD 00 00 00         A   828    	CALL	__setflag
000195 F2 D1 01 00 00      A   829    	JP	P,L_28
                           A   830    ;  230				// go left                 
                           A   831    ;  231				if ( curr [ 0 ] > 10 ) {
                           A   832    .LINE 231
Zilog eZ80 Macro Assembler Version 4.2 (11121401)03-Jun-16     17:40:42     page:  17


PC     Object              I  Line    Source main.src
                           A   833    
00019A DD27FD              A   834    	LD	HL,(IX+-3)
00019D 7E                  A   835    	LD	A,(HL)
00019E B7ED62              A   836    	UEXT	HL
0001A1 6F                  A   837    	LD	L,A
0001A2 E5C1                A   838    	LD	BC,HL
0001A4 210A0000            A   839    	LD	HL,10
0001A8 B7                  A   840    	OR	A,A
0001A9 ED42                A   841    	SBC	HL,BC
0001AB CD 00 00 00         A   842    	CALL	__setflag
0001AF F2 C5 01 00 00      A   843    	JP	P,L_14
                           A   844    ;  232	              curr [ 0 ] -= 2;
                           A   845    .LINE 232
                           A   846    
0001B4 DD27FD              A   847    	LD	HL,(IX+-3)
0001B7 DD31FD              A   848    	LD	IY,(IX+-3)
0001BA 7E                  A   849    	LD	A,(HL)
0001BB 3D                  A   850    	DEC	A
0001BC 3D                  A   851    	DEC	A
0001BD FD7700              A   852    	LD	(IY),A
                           A   853    ;  233	            } else {
                           A   854    .LINE 233
                           A   855    
0001C0 C3 D9 02 00 00      A   856    	JR	L_29
0001C5                     A   857    L_14:
                           A   858    ;  234	              curr [ 3 ] = 100;
                           A   859    .LINE 234
                           A   860    
0001C5 DD31FD              A   861    	LD	IY,(IX+-3)
0001C8 ED2303              A   862    	LEA	HL,IY+3
0001CB 3664                A   863    	LD	(HL),100
                           A   864    ;  235	            }
                           A   865    ;  236	        } else if ( curr [ 3 ] > 64 && 
                           A   866    .LINE 236
                           A   867    
0001CD C3 D9 02 00         A   868    	JR	L_29
0001D1                     A   869    L_28:
0001D1 DD31FD              A   870    	LD	IY,(IX+-3)
0001D4 ED2303              A   871    	LEA	HL,IY+3
0001D7 7E                  A   872    	LD	A,(HL)
0001D8 B7ED62              A   873    	UEXT	HL
0001DB 6F                  A   874    	LD	L,A
0001DC E5C1                A   875    	LD	BC,HL
0001DE 21400000            A   876    	LD	HL,64
0001E2 B7                  A   877    	OR	A,A
0001E3 ED42                A   878    	SBC	HL,BC
0001E5 CD 00 00 00         A   879    	CALL	__setflag
0001E9 F2 3D 02 00         A   880    	JP	P,L_26
0001ED DD31FD              A   881    	LD	IY,(IX+-3)
0001F0 ED2303              A   882    	LEA	HL,IY+3
0001F3 7E                  A   883    	LD	A,(HL)
0001F4 B7ED62              A   884    	UEXT	HL
Zilog eZ80 Macro Assembler Version 4.2 (11121401)03-Jun-16     17:40:42     page:  18


PC     Object              I  Line    Source main.src
0001F7 6F                  A   885    	LD	L,A
0001F8 01800000            A   886    	LD	BC,128
0001FC B7                  A   887    	OR	A,A
0001FD ED42                A   888    	SBC	HL,BC
0001FF CD 00 00 00         A   889    	CALL	__setflag
000203 F2 3D 02 00 00      A   890    	JP	P,L_26
                           A   891    ;  237	            // go right                
                           A   892    ;  238	            if ( curr [ 0 ] < FBWIDTH -
                           A   893    .LINE 238
                           A   894    
000208 DD27FD              A   895    	LD	HL,(IX+-3)
00020B 7E                  A   896    	LD	A,(HL)
00020C B7ED62              A   897    	UEXT	HL
00020F 6F                  A   898    	LD	L,A
000210 01D80000            A   899    	LD	BC,216
000214 B7                  A   900    	OR	A,A
000215 ED42                A   901    	SBC	HL,BC
000217 CD 00 00 00         A   902    	CALL	__setflag
00021B F2 31 02 00 00      A   903    	JP	P,L_17
                           A   904    ;  239	              curr [ 0 ] += 2;
                           A   905    .LINE 239
                           A   906    
000220 DD27FD              A   907    	LD	HL,(IX+-3)
000223 DD31FD              A   908    	LD	IY,(IX+-3)
000226 7E                  A   909    	LD	A,(HL)
000227 3C                  A   910    	INC	A
000228 3C                  A   911    	INC	A
000229 FD7700              A   912    	LD	(IY),A
                           A   913    ;  240	            } else {
                           A   914    .LINE 240
                           A   915    
00022C C3 D9 02 00 00      A   916    	JR	L_29
000231                     A   917    L_17:
                           A   918    ;  241	              curr [ 3 ] = 50;
                           A   919    .LINE 241
                           A   920    
000231 DD31FD              A   921    	LD	IY,(IX+-3)
000234 ED2303              A   922    	LEA	HL,IY+3
000237 3632                A   923    	LD	(HL),50
                           A   924    ;  242	            }
                           A   925    ;  243	        } else if ( curr [ 3 ] > 128 &&
                           A   926    .LINE 243
                           A   927    
000239 C3 D9 02 00         A   928    	JR	L_29
00023D                     A   929    L_26:
00023D DD31FD              A   930    	LD	IY,(IX+-3)
000240 ED2303              A   931    	LEA	HL,IY+3
000243 7E                  A   932    	LD	A,(HL)
000244 B7ED62              A   933    	UEXT	HL
000247 6F                  A   934    	LD	L,A
000248 E5C1                A   935    	LD	BC,HL
00024A 21800000            A   936    	LD	HL,128
Zilog eZ80 Macro Assembler Version 4.2 (11121401)03-Jun-16     17:40:42     page:  19


PC     Object              I  Line    Source main.src
00024E B7                  A   937    	OR	A,A
00024F ED42                A   938    	SBC	HL,BC
000251 CD 00 00 00         A   939    	CALL	__setflag
000255 F2 A9 02 00         A   940    	JP	P,L_24
000259 DD31FD              A   941    	LD	IY,(IX+-3)
00025C ED2303              A   942    	LEA	HL,IY+3
00025F 7E                  A   943    	LD	A,(HL)
000260 B7ED62              A   944    	UEXT	HL
000263 6F                  A   945    	LD	L,A
000264 01C00000            A   946    	LD	BC,192
000268 B7                  A   947    	OR	A,A
000269 ED42                A   948    	SBC	HL,BC
00026B CD 00 00 00         A   949    	CALL	__setflag
00026F F2 A9 02 00 00      A   950    	JP	P,L_24
                           A   951    ;  244	            // up                      
                           A   952    ;  245	            if ( curr [ 1 ] > 40 ) {
                           A   953    .LINE 245
                           A   954    
000274 DD27FD              A   955    	LD	HL,(IX+-3)
000277 23                  A   956    	INC	HL
000278 7E                  A   957    	LD	A,(HL)
000279 B7ED62              A   958    	UEXT	HL
00027C 6F                  A   959    	LD	L,A
00027D E5C1                A   960    	LD	BC,HL
00027F 21280000            A   961    	LD	HL,40
000283 B7                  A   962    	OR	A,A
000284 ED42                A   963    	SBC	HL,BC
000286 CD 00 00 00         A   964    	CALL	__setflag
00028A F2 9E 02 00 00      A   965    	JP	P,L_20
                           A   966    ;  246	              curr [ 1 ] -= 1;
                           A   967    .LINE 246
                           A   968    
00028F DD27FD              A   969    	LD	HL,(IX+-3)
000292 23                  A   970    	INC	HL
000293 DD31FD              A   971    	LD	IY,(IX+-3)
000296 7E                  A   972    	LD	A,(HL)
000297 3D                  A   973    	DEC	A
000298 FD7701              A   974    	LD	(IY+1),A
                           A   975    ;  247	            } else {
                           A   976    .LINE 247
                           A   977    
00029B 18 3C 00            A   978    	JR	L_29
00029E                     A   979    L_20:
                           A   980    ;  248	              curr [ 3 ] = 250;
                           A   981    .LINE 248
                           A   982    
00029E DD31FD              A   983    	LD	IY,(IX+-3)
0002A1 ED2303              A   984    	LEA	HL,IY+3
0002A4 36FA                A   985    	LD	(HL),250
                           A   986    ;  249	            }
                           A   987    ;  250	        } else {
                           A   988    .LINE 250
Zilog eZ80 Macro Assembler Version 4.2 (11121401)03-Jun-16     17:40:42     page:  20


PC     Object              I  Line    Source main.src
                           A   989    
0002A6 18 31 00            A   990    	JR	L_29
0002A9                     A   991    L_24:
                           A   992    ;  251	            // down                    
                           A   993    ;  252	            if ( curr [ 1 ] < FBHEIGHT 
                           A   994    .LINE 252
                           A   995    
0002A9 DD27FD              A   996    	LD	HL,(IX+-3)
0002AC 23                  A   997    	INC	HL
0002AD 7E                  A   998    	LD	A,(HL)
0002AE B7ED62              A   999    	UEXT	HL
0002B1 6F                  A  1000    	LD	L,A
0002B2 01980000            A  1001    	LD	BC,152
0002B6 B7                  A  1002    	OR	A,A
0002B7 ED42                A  1003    	SBC	HL,BC
0002B9 CD 00 00 00         A  1004    	CALL	__setflag
0002BD F2 D1 02 00 00      A  1005    	JP	P,L_22
                           A  1006    ;  253	              curr [ 1 ] += 1;
                           A  1007    .LINE 253
                           A  1008    
0002C2 DD31FD              A  1009    	LD	IY,(IX+-3)
0002C5 DD27FD              A  1010    	LD	HL,(IX+-3)
0002C8 23                  A  1011    	INC	HL
0002C9 FD7E01              A  1012    	LD	A,(IY+1)
0002CC 3C                  A  1013    	INC	A
0002CD 77                  A  1014    	LD	(HL),A
                           A  1015    ;  254	            } else {
                           A  1016    .LINE 254
                           A  1017    
0002CE 18 09 00            A  1018    	JR	L_29
0002D1                     A  1019    L_22:
                           A  1020    ;  255	              curr [ 3 ] = 150;
                           A  1021    .LINE 255
                           A  1022    
0002D1 DD31FD              A  1023    	LD	IY,(IX+-3)
0002D4 ED2303              A  1024    	LEA	HL,IY+3
0002D7 3696                A  1025    	LD	(HL),150
                           A  1026    ;  256	            }
                           A  1027    ;  257	         }
0002D9                     A  1028    L_29:
                           A  1029    .LINE 257
                           A  1030    
                           A  1031    ;  258	#endif
                           A  1032    ;  259				curr += 4;
                           A  1033    .LINE 259
                           A  1034    
0002D9 DD31FD              A  1035    	LD	IY,(IX+-3)
0002DC ED3304              A  1036    	LEA	IY,IY+4
0002DF DD3EFD              A  1037    	LD	(IX+-3),IY
0002E2 DD34F9              A  1038    	INC	(IX+-7)
                           A  1039    ;  260			} // iter
                           A  1040    .LINE 260
Zilog eZ80 Macro Assembler Version 4.2 (11121401)03-Jun-16     17:40:42     page:  21


PC     Object              I  Line    Source main.src
                           A  1041    
0002E5 C3 6D 01 00 00      A  1042    	JR	L_31
0002EA                     A  1043    L_34:
                           A  1044    ;  261		 
                           A  1045    ;  262	
                           A  1046    ;  263			
                           A  1047    ;  264			vb_wait_for_vblank ( VB_CLEAR_S
                           A  1048    .LINE 264
                           A  1049    
0002EA 01010000            A  1050    	LD	BC,1
0002EE C5                  A  1051    	PUSH	BC
0002EF CD 00 00 00         A  1052    	CALL	_vb_wait_for_vblank
0002F3 C1                  A  1053    	POP	BC
                           A  1054    ;  265		}
                           A  1055    .LINE 265
                           A  1056    
0002F4 C3 5F 01 00 00      A  1057    	JR	L_35
                           A  1058    ;  266	
                           A  1059    ;  267		while ( 1 ) {
0002F9                     A  1060    L_45:
                           A  1061    .LINE 267
                           A  1062    
                           A  1063    ;  268			UINT8 *extram;
                           A  1064    ;  269			char inbuf [ 5 ] = "\0\0\0\0\0"
                           A  1065    .LINE 269
                           A  1066    
0002F9 ED12F2              A  1067    	LEA	DE,IX+-14
0002FC 21 00 00 00         A  1068    	LD	HL,_0temp37
000300 01050000            A  1069    	LD	BC,5
000304 EDB0 00             A  1070    	LDIR	
                           A  1071    ;  270			UINT24 nbytes;
                           A  1072    ;  271			UCHAR retval;
                           A  1073    ;  272				
                           A  1074    ;  273			extram = (UINT8 *) TM_VRAM_FB;
                           A  1075    .LINE 273
                           A  1076    
000307 0100000C            A  1077    	LD	BC,786432
00030B DD0FFA              A  1078    	LD	(IX+-6),BC
                           A  1079    ;  274	
                           A  1080    ;  275			strcpy ( extram, "Zikzak http:/
                           A  1081    .LINE 275
                           A  1082    
00030E 01 04 00 00         A  1083    	LD	BC,L__15
000312 C5                  A  1084    	PUSH	BC
000313 DD07FA              A  1085    	LD	BC,(IX+-6)
000316 C5                  A  1086    	PUSH	BC
000317 CD 00 00 00         A  1087    	CALL	_strcpy
00031B C1                  A  1088    	POP	BC
00031C C1                  A  1089    	POP	BC
                           A  1090    ;  276			extram += TM_TEXTLINE_STRIDE;
                           A  1091    .LINE 276
                           A  1092    
Zilog eZ80 Macro Assembler Version 4.2 (11121401)03-Jun-16     17:40:42     page:  22


PC     Object              I  Line    Source main.src
00031D DD31FA              A  1093    	LD	IY,(IX+-6)
000320 ED3320              A  1094    	LEA	IY,IY+32
000323 DD3EFA              A  1095    	LD	(IX+-6),IY
                           A  1096    ;  277			strcpy ( extram, "Zikzak http:/
                           A  1097    .LINE 277
                           A  1098    
000326 01 20 00 00         A  1099    	LD	BC,L__16
00032A C5                  A  1100    	PUSH	BC
00032B DD07FA              A  1101    	LD	BC,(IX+-6)
00032E C5                  A  1102    	PUSH	BC
00032F CD 00 00 00         A  1103    	CALL	_strcpy
000333 C1                  A  1104    	POP	BC
000334 C1                  A  1105    	POP	BC
                           A  1106    ;  278			extram += TM_TEXTLINE_STRIDE;
                           A  1107    .LINE 278
                           A  1108    
000335 DD31FA              A  1109    	LD	IY,(IX+-6)
000338 ED3320              A  1110    	LEA	IY,IY+32
00033B DD3EFA              A  1111    	LD	(IX+-6),IY
                           A  1112    ;  279			strcpy ( extram, "Zikzak http:/
                           A  1113    .LINE 279
                           A  1114    
00033E 01 3C 00 00         A  1115    	LD	BC,L__17
000342 C5                  A  1116    	PUSH	BC
000343 DD07FA              A  1117    	LD	BC,(IX+-6)
000346 C5                  A  1118    	PUSH	BC
000347 CD 00 00 00         A  1119    	CALL	_strcpy
00034B C1                  A  1120    	POP	BC
00034C C1                  A  1121    	POP	BC
                           A  1122    ;  280			extram += TM_TEXTLINE_STRIDE;
                           A  1123    .LINE 280
                           A  1124    
00034D DD31FA              A  1125    	LD	IY,(IX+-6)
000350 ED3320              A  1126    	LEA	IY,IY+32
000353 DD3EFA              A  1127    	LD	(IX+-6),IY
                           A  1128    ;  281			
                           A  1129    ;  282			//render_font_8x8 ( 0, 0,  "Zik
                           A  1130    ;  283			//render_font_8x8 ( 0, 8,  "Mod
                           A  1131    ;  284			//render_font_8x8 ( 0, 16, "In:
                           A  1132    ;  285			
                           A  1133    ;  286			//render_font_8x8 ( 0, 32, menu
                           A  1134    ;  287			
                           A  1135    ;  288			nbytes = 1;
                           A  1136    .LINE 288
                           A  1137    
000356 01010000            A  1138    	LD	BC,1
00035A DD0FEE              A  1139    	LD	(IX+-18),BC
                           A  1140    ;  289			retval = read_UART0 ( inbuf, &n
                           A  1141    .LINE 289
                           A  1142    
00035D ED65EE              A  1143    	PEA	IX+-18
000360 ED65F2              A  1144    	PEA	IX+-14
Zilog eZ80 Macro Assembler Version 4.2 (11121401)03-Jun-16     17:40:42     page:  23


PC     Object              I  Line    Source main.src
000363 CD 00 00 00         A  1145    	CALL	_read_UART0
000367 C1                  A  1146    	POP	BC
000368 C1                  A  1147    	POP	BC
000369 DD77F1              A  1148    	LD	(IX+-15),A
                           A  1149    ;  290			
                           A  1150    ;  291			// echo back
                           A  1151    ;  292			render_font_8x8 ( 0, 0,  inbuf,
                           A  1152    .LINE 292
                           A  1153    
00036C 01FF0000            A  1154    	LD	BC,255
000370 C5                  A  1155    	PUSH	BC
000371 01010000            A  1156    	LD	BC,1
000375 C5                  A  1157    	PUSH	BC
000376 CD 00 00 00         A  1158    	CALL	_lame_randrange8
00037A C1                  A  1159    	POP	BC
00037B C1                  A  1160    	POP	BC
00037C 4F                  A  1161    	LD	C,A
00037D 0600                A  1162    	LD	B,0
00037F C5                  A  1163    	PUSH	BC
000380 ED65F2              A  1164    	PEA	IX+-14
000383 01000000            A  1165    	LD	BC,0
000387 C5                  A  1166    	PUSH	BC
000388 C5                  A  1167    	PUSH	BC
000389 CD 00 00 00         A  1168    	CALL	_render_font_8x8
00038D C1                  A  1169    	POP	BC
00038E C1                  A  1170    	POP	BC
00038F C1                  A  1171    	POP	BC
000390 C1                  A  1172    	POP	BC
                           A  1173    ;  293			write_UART0 ( inbuf, lame_strle
                           A  1174    .LINE 293
                           A  1175    
000391 ED65F2              A  1176    	PEA	IX+-14
000394 CD 00 00 00         A  1177    	CALL	_lame_strlen
000398 C1                  A  1178    	POP	BC
000399 E5C1                A  1179    	LD	BC,HL
00039B CD 00 00 00         A  1180    	CALL	__stoiu
00039F E5                  A  1181    	PUSH	HL
0003A0 ED65F2              A  1182    	PEA	IX+-14
0003A3 CD 00 00 00         A  1183    	CALL	_write_UART0
0003A7 C1                  A  1184    	POP	BC
0003A8 C1                  A  1185    	POP	BC
                           A  1186    ;  294			
                           A  1187    ;  295			if ( retval == UART_ERR_NONE ) 
                           A  1188    .LINE 295
                           A  1189    
0003A9 DD7EF1              A  1190    	LD	A,(IX+-15)
0003AC B7                  A  1191    	OR	A,A
0003AD C2 36 04 00 00      A  1192    	JR	NZ,L_44
                           A  1193    ;  296				
                           A  1194    ;  297				switch ( inbuf [ 0 ] ) {
                           A  1195    .LINE 297
                           A  1196    
Zilog eZ80 Macro Assembler Version 4.2 (11121401)03-Jun-16     17:40:42     page:  24


PC     Object              I  Line    Source main.src
0003B2 DD7EF2              A  1197    	LD	A,(IX+-14)
0003B5 17ED62              A  1198    	SEXT	HL
0003B8 DD6EF2              A  1199    	LD	L,(IX+-14)
0003BB CD 00 00 00         A  1200    	CALL	__case8D
0003BF E9                  A  1201    	JP	(HL)
0003C0                     A  1202    L__19:
0003C0 0400                A  1203    	DW	4
0003C2 31                  A  1204    	DB	49
0003C3 D50300              A  1205    	DW24	L_38	
                           A  1206    
0003C6 32                  A  1207    	DB	50
0003C7 EE0300              A  1208    	DW24	L_39	
                           A  1209    
0003CA 34                  A  1210    	DB	52
0003CB 010400              A  1211    	DW24	L_40	
                           A  1212    
0003CE 35                  A  1213    	DB	53
0003CF 140400              A  1214    	DW24	L_41	
                           A  1215    
0003D2 270400              A  1216    	DW24	L_42	
                           A  1217    
                           A  1218    ;  298					case '1':
0003D5                     A  1219    L_38:
                           A  1220    .LINE 298
                           A  1221    
                           A  1222    ;  299					{
                           A  1223    ;  300						demo_linedemo ( 500
                           A  1224    .LINE 300
                           A  1225    
0003D5 01F40100            A  1226    	LD	BC,500
0003D9 C5                  A  1227    	PUSH	BC
0003DA CD 00 00 00         A  1228    	CALL	_demo_linedemo
0003DE C1                  A  1229    	POP	BC
                           A  1230    ;  301						demo_pause ( "** Pr
                           A  1231    .LINE 301
                           A  1232    
0003DF 01 58 00 00         A  1233    	LD	BC,L__20
0003E3 C5                  A  1234    	PUSH	BC
0003E4 CD 00 00 00         A  1235    	CALL	_demo_pause
0003E8 C1                  A  1236    	POP	BC
                           A  1237    ;  302					}
                           A  1238    ;  303					break;
                           A  1239    .LINE 303
                           A  1240    
0003E9 C3 F9 02 00 00      A  1241    	JR	L_45
                           A  1242    ;  304					
                           A  1243    ;  305					case '2':
0003EE                     A  1244    L_39:
                           A  1245    .LINE 305
                           A  1246    
                           A  1247    ;  306					{
                           A  1248    ;  307						demo_offset_squares
Zilog eZ80 Macro Assembler Version 4.2 (11121401)03-Jun-16     17:40:42     page:  25


PC     Object              I  Line    Source main.src
                           A  1249    .LINE 307
                           A  1250    
0003EE CD 00 00 00         A  1251    	CALL	_demo_offset_squares
                           A  1252    ;  308						demo_pause ( "** Pr
                           A  1253    .LINE 308
                           A  1254    
0003F2 01 76 00 00         A  1255    	LD	BC,L__21
0003F6 C5                  A  1256    	PUSH	BC
0003F7 CD 00 00 00         A  1257    	CALL	_demo_pause
0003FB C1                  A  1258    	POP	BC
                           A  1259    ;  309					}
                           A  1260    ;  310					break;
                           A  1261    .LINE 310
                           A  1262    
0003FC C3 F9 02 00 00      A  1263    	JR	L_45
                           A  1264    ;  311	
                           A  1265    ;  312					case '4':
000401                     A  1266    L_40:
                           A  1267    .LINE 312
                           A  1268    
                           A  1269    ;  313					{
                           A  1270    ;  314						demo_charset();
                           A  1271    .LINE 314
                           A  1272    
000401 CD 00 00 00         A  1273    	CALL	_demo_charset
                           A  1274    ;  315						demo_pause ( "** Pr
                           A  1275    .LINE 315
                           A  1276    
000405 01 94 00 00         A  1277    	LD	BC,L__22
000409 C5                  A  1278    	PUSH	BC
00040A CD 00 00 00         A  1279    	CALL	_demo_pause
00040E C1                  A  1280    	POP	BC
                           A  1281    ;  316					}
                           A  1282    ;  317					break;
                           A  1283    .LINE 317
                           A  1284    
00040F C3 F9 02 00 00      A  1285    	JR	L_45
                           A  1286    ;  318	
                           A  1287    ;  319					case '5':
000414                     A  1288    L_41:
                           A  1289    .LINE 319
                           A  1290    
                           A  1291    ;  320					{
                           A  1292    ;  321						demo_sprite_fb();
                           A  1293    .LINE 321
                           A  1294    
000414 CD 00 00 00         A  1295    	CALL	_demo_sprite_fb
                           A  1296    ;  322						demo_pause ( "** Pr
                           A  1297    .LINE 322
                           A  1298    
000418 01 B2 00 00         A  1299    	LD	BC,L__23
00041C C5                  A  1300    	PUSH	BC
Zilog eZ80 Macro Assembler Version 4.2 (11121401)03-Jun-16     17:40:42     page:  26


PC     Object              I  Line    Source main.src
00041D CD 00 00 00         A  1301    	CALL	_demo_pause
000421 C1                  A  1302    	POP	BC
                           A  1303    ;  323					}
                           A  1304    ;  324					break;
                           A  1305    .LINE 324
                           A  1306    
000422 C3 F9 02 00 00      A  1307    	JR	L_45
                           A  1308    ;  325	
                           A  1309    ;  326					default:
000427                     A  1310    L_42:
                           A  1311    .LINE 326
                           A  1312    
                           A  1313    ;  327						demo_pause ( "** Op
                           A  1314    .LINE 327
                           A  1315    
000427 01 D0 00 00         A  1316    	LD	BC,L__24
00042B C5                  A  1317    	PUSH	BC
00042C CD 00 00 00         A  1318    	CALL	_demo_pause
000430 C1                  A  1319    	POP	BC
                           A  1320    ;  328				}
                           A  1321    ;  329				
                           A  1322    ;  330				
                           A  1323    ;  331			} else {
                           A  1324    .LINE 331
                           A  1325    
000431 C3 F9 02 00 00      A  1326    	JR	L_45
000436                     A  1327    L_44:
                           A  1328    ;  332				flush_UART0 ( FLUSHFIFO_ALL
                           A  1329    .LINE 332
                           A  1330    
000436 01030000            A  1331    	LD	BC,3
00043A C5                  A  1332    	PUSH	BC
00043B CD 00 00 00         A  1333    	CALL	_flush_UART0
00043F C1                  A  1334    	POP	BC
                           A  1335    ;  333			}
                           A  1336    ;  334			
                           A  1337    ;  335		}
                           A  1338    .LINE 335
                           A  1339    
000440 C3 F9 02 00 00      A  1340    	JR	L_45
                           A  1341    ;  336	
                           A  1342    ;  337	}	
                           A  1343    ;  338	#endif
                           A  1344    ;  339		
                           A  1345    ;  340	#if 0 // do nothing
                           A  1346    ;  341		{
                           A  1347    ;  342			char b [ 20 ];
                           A  1348    ;  343			UINT8 v = 1;
                           A  1349    ;  344			while ( 1 ) {
                           A  1350    ;  345				lame_itoa ( v, b );
                           A  1351    ;  346			}
                           A  1352    ;  347		}
Zilog eZ80 Macro Assembler Version 4.2 (11121401)03-Jun-16     17:40:42     page:  27


PC     Object              I  Line    Source main.src
                           A  1353    ;  348	#endif
                           A  1354    ;  349		
                           A  1355    ;  350		return ( 0 );
                           A  1356    ;  351	}
                           A  1357    .LINE 351
                           A  1358    
000445 DDF9                A  1359    	LD	SP,IX
000447 DDE1                A  1360    	POP	IX
000449 C9                  A  1361    	RET	
                           A  1362    
                           A  1363    
                           A  1364    ;**************************** _main ***********
                           A  1365    ;Name                         Addr/Register   S
                           A  1366    ;_demo_sprite_fb                     IMPORT  --
                           A  1367    ;_demo_charset                       IMPORT  --
                           A  1368    ;_demo_offset_squares                IMPORT  --
                           A  1369    ;_demo_pause                         IMPORT  --
                           A  1370    ;_demo_linedemo                      IMPORT  --
                           A  1371    ;_lame_randrange8                    IMPORT  --
                           A  1372    ;_render_font_8x8                    IMPORT  --
                           A  1373    ;_read_UART0                         IMPORT  --
                           A  1374    ;_strcpy                             IMPORT  --
                           A  1375    ;_0temp37                            STATIC    
                           A  1376    ;_vb_wait_for_vblank                 IMPORT  --
                           A  1377    ;_map_scan_code                      IMPORT  --
                           A  1378    ;_packet_fetch_blocking              IMPORT  --
                           A  1379    ;_keyb_setup                         IMPORT  --
                           A  1380    ;_flush_UART0                        IMPORT  --
                           A  1381    ;_lame_strlen                        IMPORT  --
                           A  1382    ;_lame_itoa                          IMPORT  --
                           A  1383    ;_write_UART0                        IMPORT  --
                           A  1384    ;_open_UART0                         IMPORT  --
                           A  1385    ;__init_default_vectors              IMPORT  --
                           A  1386    ;_delay_ms_spin                      IMPORT  --
                           A  1387    ;spritelist                          IX-182    
                           A  1388    ;b                                    IX-54    
                           A  1389    ;b                                    IX-38    
                           A  1390    ;u0                                   IX-28    
                           A  1391    ;nbytes                               IX-18    
                           A  1392    ;retval                               IX-15    
                           A  1393    ;inbuf                                IX-14    
                           A  1394    ;p                                     IX-9    
                           A  1395    ;i                                     IX-8    
                           A  1396    ;iter                                  IX-7    
                           A  1397    ;extram                                IX-6    
                           A  1398    ;curr                                  IX-3    
                           A  1399    
                           A  1400    
                           A  1401    ; Stack Frame Size: 188 (bytes)
                           A  1402    ;       Spill Code: 0 (instruction)
                           A  1403    
                           A  1404    
Zilog eZ80 Macro Assembler Version 4.2 (11121401)03-Jun-16     17:40:42     page:  28


PC     Object              I  Line    Source main.src
                           A  1405    .ENDFUNC "main",351,"_main"
                           A  1406    	SEGMENT STRSECT
000000                     A  1407    L__3:
000000 0A00                A  1408    	DB	10,0
000002                     A  1409    L__4:
000002 0A00                A  1410    	DB	10,0
000004                     A  1411    L__15:
000004 5A696B7A 616B2068   A  1412    	DB	"Zikzak http://www.zikzak.ca"
00000C 7474703A 2F2F7777 
000014 772E7A69 6B7A616B 
00001C 2E6361 
00001F 00                  A  1413    	DB	0
000020                     A  1414    L__16:
000020 5A696B7A 616B2068   A  1415    	DB	"Zikzak http://www.zikzak.ca"
000028 7474703A 2F2F7777 
000030 772E7A69 6B7A616B 
000038 2E6361 
00003B 00                  A  1416    	DB	0
00003C                     A  1417    L__17:
00003C 5A696B7A 616B2068   A  1418    	DB	"Zikzak http://www.zikzak.ca"
000044 7474703A 2F2F7777 
00004C 772E7A69 6B7A616B 
000054 2E6361 
000057 00                  A  1419    	DB	0
000058                     A  1420    L__20:
000058 2A2A2050 72657373   A  1421    	DB	"** Press key to exit demo ** "
000060 206B6579 20746F20 
000068 65786974 2064656D 
000070 6F202A2A 20 
000075 00                  A  1422    	DB	0
000076                     A  1423    L__21:
000076 2A2A2050 72657373   A  1424    	DB	"** Press key to exit demo ** "
00007E 206B6579 20746F20 
000086 65786974 2064656D 
00008E 6F202A2A 20 
000093 00                  A  1425    	DB	0
000094                     A  1426    L__22:
000094 2A2A2050 72657373   A  1427    	DB	"** Press key to exit demo ** "
00009C 206B6579 20746F20 
0000A4 65786974 2064656D 
0000AC 6F202A2A 20 
0000B1 00                  A  1428    	DB	0
0000B2                     A  1429    L__23:
0000B2 2A2A2050 72657373   A  1430    	DB	"** Press key to exit demo ** "
0000BA 206B6579 20746F20 
0000C2 65786974 2064656D 
0000CA 6F202A2A 20 
0000CF 00                  A  1431    	DB	0
0000D0                     A  1432    L__24:
0000D0 2A2A204F 7074696F   A  1433    	DB	"** Option not recognized. ** "
0000D8 6E206E6F 74207265 
0000E0 636F676E 697A6564 
Zilog eZ80 Macro Assembler Version 4.2 (11121401)03-Jun-16     17:40:42     page:  29


PC     Object              I  Line    Source main.src
0000E8 2E202A2A 20 
0000ED 00                  A  1434    	DB	0
                           A  1435    	SEGMENT TEXT
000000                     A  1436    _0temp37:
000000 00                  A  1437    	DB	0
000001 00                  A  1438    	DB	0
000002 00                  A  1439    	DB	0
000003 00                  A  1440    	DB	0
000004 00                  A  1441    	DB	0
                           A  1442    	XREF _demo_sprite_fb:ROM
                           A  1443    	XREF _demo_charset:ROM
                           A  1444    	XREF _demo_offset_squares:ROM
                           A  1445    	XREF _demo_linedemo:ROM
                           A  1446    	XREF _demo_pause:ROM
                           A  1447    	XREF _vb_wait_for_vblank:ROM
                           A  1448    	XREF _packet_fetch_blocking:ROM
                           A  1449    	XREF _map_scan_code:ROM
                           A  1450    	XREF _keyb_setup:ROM
                           A  1451    	XREF _render_font_8x8:ROM
                           A  1452    	XREF _delay_ms_spin:ROM
                           A  1453    	XREF _lame_randrange8:ROM
                           A  1454    	XREF _lame_strlen:ROM
                           A  1455    	XREF _lame_itoa:ROM
                           A  1456    	XREF _strcpy:ROM
                           A  1457    	XREF _read_UART0:ROM
                           A  1458    	XREF _write_UART0:ROM
                           A  1459    	XREF _flush_UART0:ROM
                           A  1460    	XREF _open_UART0:ROM
                           A  1461    	XREF __init_default_vectors:ROM
                           A  1462    	XREF __stoiu:ROM
                           A  1463    	XREF __setflag:ROM
                           A  1464    	XREF __icmpzero:ROM
                           A  1465    	XREF __case8D:ROM
                           A  1466    	XDEF _main
                           A  1467    	END


Errors: 0
Warnings: 0
Lines Assembled: 1468
